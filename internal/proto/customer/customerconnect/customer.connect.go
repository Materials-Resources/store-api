// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: customer.proto

package customerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	customer "github.com/materials-resources/store-api/internal/proto/customer"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CustomerServiceName is the fully-qualified name of the CustomerService service.
	CustomerServiceName = "customer.v1.CustomerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CustomerServiceGetBranchesForContactProcedure is the fully-qualified name of the
	// CustomerService's GetBranchesForContact RPC.
	CustomerServiceGetBranchesForContactProcedure = "/customer.v1.CustomerService/GetBranchesForContact"
	// CustomerServiceGetBranchProcedure is the fully-qualified name of the CustomerService's GetBranch
	// RPC.
	CustomerServiceGetBranchProcedure = "/customer.v1.CustomerService/GetBranch"
	// CustomerServiceGetRecentPurchasesByBranchProcedure is the fully-qualified name of the
	// CustomerService's GetRecentPurchasesByBranch RPC.
	CustomerServiceGetRecentPurchasesByBranchProcedure = "/customer.v1.CustomerService/GetRecentPurchasesByBranch"
)

// CustomerServiceClient is a client for the customer.v1.CustomerService service.
type CustomerServiceClient interface {
	GetBranchesForContact(context.Context, *connect.Request[customer.GetBranchesForContactRequest]) (*connect.Response[customer.GetBranchesForContactResponse], error)
	GetBranch(context.Context, *connect.Request[customer.GetBranchRequest]) (*connect.Response[customer.GetBranchResponse], error)
	GetRecentPurchasesByBranch(context.Context, *connect.Request[customer.GetRecentPurchasesByBranchRequest]) (*connect.Response[customer.GetRecentPurchasesByBranchResponse], error)
}

// NewCustomerServiceClient constructs a client for the customer.v1.CustomerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCustomerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CustomerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	customerServiceMethods := customer.File_customer_proto.Services().ByName("CustomerService").Methods()
	return &customerServiceClient{
		getBranchesForContact: connect.NewClient[customer.GetBranchesForContactRequest, customer.GetBranchesForContactResponse](
			httpClient,
			baseURL+CustomerServiceGetBranchesForContactProcedure,
			connect.WithSchema(customerServiceMethods.ByName("GetBranchesForContact")),
			connect.WithClientOptions(opts...),
		),
		getBranch: connect.NewClient[customer.GetBranchRequest, customer.GetBranchResponse](
			httpClient,
			baseURL+CustomerServiceGetBranchProcedure,
			connect.WithSchema(customerServiceMethods.ByName("GetBranch")),
			connect.WithClientOptions(opts...),
		),
		getRecentPurchasesByBranch: connect.NewClient[customer.GetRecentPurchasesByBranchRequest, customer.GetRecentPurchasesByBranchResponse](
			httpClient,
			baseURL+CustomerServiceGetRecentPurchasesByBranchProcedure,
			connect.WithSchema(customerServiceMethods.ByName("GetRecentPurchasesByBranch")),
			connect.WithClientOptions(opts...),
		),
	}
}

// customerServiceClient implements CustomerServiceClient.
type customerServiceClient struct {
	getBranchesForContact      *connect.Client[customer.GetBranchesForContactRequest, customer.GetBranchesForContactResponse]
	getBranch                  *connect.Client[customer.GetBranchRequest, customer.GetBranchResponse]
	getRecentPurchasesByBranch *connect.Client[customer.GetRecentPurchasesByBranchRequest, customer.GetRecentPurchasesByBranchResponse]
}

// GetBranchesForContact calls customer.v1.CustomerService.GetBranchesForContact.
func (c *customerServiceClient) GetBranchesForContact(ctx context.Context, req *connect.Request[customer.GetBranchesForContactRequest]) (*connect.Response[customer.GetBranchesForContactResponse], error) {
	return c.getBranchesForContact.CallUnary(ctx, req)
}

// GetBranch calls customer.v1.CustomerService.GetBranch.
func (c *customerServiceClient) GetBranch(ctx context.Context, req *connect.Request[customer.GetBranchRequest]) (*connect.Response[customer.GetBranchResponse], error) {
	return c.getBranch.CallUnary(ctx, req)
}

// GetRecentPurchasesByBranch calls customer.v1.CustomerService.GetRecentPurchasesByBranch.
func (c *customerServiceClient) GetRecentPurchasesByBranch(ctx context.Context, req *connect.Request[customer.GetRecentPurchasesByBranchRequest]) (*connect.Response[customer.GetRecentPurchasesByBranchResponse], error) {
	return c.getRecentPurchasesByBranch.CallUnary(ctx, req)
}

// CustomerServiceHandler is an implementation of the customer.v1.CustomerService service.
type CustomerServiceHandler interface {
	GetBranchesForContact(context.Context, *connect.Request[customer.GetBranchesForContactRequest]) (*connect.Response[customer.GetBranchesForContactResponse], error)
	GetBranch(context.Context, *connect.Request[customer.GetBranchRequest]) (*connect.Response[customer.GetBranchResponse], error)
	GetRecentPurchasesByBranch(context.Context, *connect.Request[customer.GetRecentPurchasesByBranchRequest]) (*connect.Response[customer.GetRecentPurchasesByBranchResponse], error)
}

// NewCustomerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCustomerServiceHandler(svc CustomerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	customerServiceMethods := customer.File_customer_proto.Services().ByName("CustomerService").Methods()
	customerServiceGetBranchesForContactHandler := connect.NewUnaryHandler(
		CustomerServiceGetBranchesForContactProcedure,
		svc.GetBranchesForContact,
		connect.WithSchema(customerServiceMethods.ByName("GetBranchesForContact")),
		connect.WithHandlerOptions(opts...),
	)
	customerServiceGetBranchHandler := connect.NewUnaryHandler(
		CustomerServiceGetBranchProcedure,
		svc.GetBranch,
		connect.WithSchema(customerServiceMethods.ByName("GetBranch")),
		connect.WithHandlerOptions(opts...),
	)
	customerServiceGetRecentPurchasesByBranchHandler := connect.NewUnaryHandler(
		CustomerServiceGetRecentPurchasesByBranchProcedure,
		svc.GetRecentPurchasesByBranch,
		connect.WithSchema(customerServiceMethods.ByName("GetRecentPurchasesByBranch")),
		connect.WithHandlerOptions(opts...),
	)
	return "/customer.v1.CustomerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CustomerServiceGetBranchesForContactProcedure:
			customerServiceGetBranchesForContactHandler.ServeHTTP(w, r)
		case CustomerServiceGetBranchProcedure:
			customerServiceGetBranchHandler.ServeHTTP(w, r)
		case CustomerServiceGetRecentPurchasesByBranchProcedure:
			customerServiceGetRecentPurchasesByBranchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCustomerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCustomerServiceHandler struct{}

func (UnimplementedCustomerServiceHandler) GetBranchesForContact(context.Context, *connect.Request[customer.GetBranchesForContactRequest]) (*connect.Response[customer.GetBranchesForContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customer.v1.CustomerService.GetBranchesForContact is not implemented"))
}

func (UnimplementedCustomerServiceHandler) GetBranch(context.Context, *connect.Request[customer.GetBranchRequest]) (*connect.Response[customer.GetBranchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customer.v1.CustomerService.GetBranch is not implemented"))
}

func (UnimplementedCustomerServiceHandler) GetRecentPurchasesByBranch(context.Context, *connect.Request[customer.GetRecentPurchasesByBranchRequest]) (*connect.Response[customer.GetRecentPurchasesByBranchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customer.v1.CustomerService.GetRecentPurchasesByBranch is not implemented"))
}
