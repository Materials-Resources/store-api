// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: order.proto

package orderconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	order "github.com/materials-resources/store-api/internal/proto/order"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrderServiceName is the fully-qualified name of the OrderService service.
	OrderServiceName = "order.v1.OrderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrderServiceListOrdersProcedure is the fully-qualified name of the OrderService's ListOrders RPC.
	OrderServiceListOrdersProcedure = "/order.v1.OrderService/ListOrders"
	// OrderServiceGetOrderProcedure is the fully-qualified name of the OrderService's GetOrder RPC.
	OrderServiceGetOrderProcedure = "/order.v1.OrderService/GetOrder"
	// OrderServiceCreateOrderProcedure is the fully-qualified name of the OrderService's CreateOrder
	// RPC.
	OrderServiceCreateOrderProcedure = "/order.v1.OrderService/CreateOrder"
	// OrderServiceListQuotesProcedure is the fully-qualified name of the OrderService's ListQuotes RPC.
	OrderServiceListQuotesProcedure = "/order.v1.OrderService/ListQuotes"
	// OrderServiceGetQuoteProcedure is the fully-qualified name of the OrderService's GetQuote RPC.
	OrderServiceGetQuoteProcedure = "/order.v1.OrderService/GetQuote"
	// OrderServiceCreateQuoteProcedure is the fully-qualified name of the OrderService's CreateQuote
	// RPC.
	OrderServiceCreateQuoteProcedure = "/order.v1.OrderService/CreateQuote"
	// OrderServiceListShipmentsByOrderProcedure is the fully-qualified name of the OrderService's
	// ListShipmentsByOrder RPC.
	OrderServiceListShipmentsByOrderProcedure = "/order.v1.OrderService/ListShipmentsByOrder"
	// OrderServiceGetShipmentProcedure is the fully-qualified name of the OrderService's GetShipment
	// RPC.
	OrderServiceGetShipmentProcedure = "/order.v1.OrderService/GetShipment"
	// OrderServiceGetPackingListProcedure is the fully-qualified name of the OrderService's
	// GetPackingList RPC.
	OrderServiceGetPackingListProcedure = "/order.v1.OrderService/GetPackingList"
	// OrderServiceListPackingListsByOrderProcedure is the fully-qualified name of the OrderService's
	// ListPackingListsByOrder RPC.
	OrderServiceListPackingListsByOrderProcedure = "/order.v1.OrderService/ListPackingListsByOrder"
)

// OrderServiceClient is a client for the order.v1.OrderService service.
type OrderServiceClient interface {
	// ListOrders returns a list of orders for a given customer
	ListOrders(context.Context, *connect.Request[order.ListOrdersRequest]) (*connect.Response[order.ListOrdersResponse], error)
	// GetOrder returns the order details for a given order id
	GetOrder(context.Context, *connect.Request[order.GetOrderRequest]) (*connect.Response[order.GetOrderResponse], error)
	// CreateOrder creates a new order
	CreateOrder(context.Context, *connect.Request[order.CreateOrderRequest]) (*connect.Response[order.CreateOrderResponse], error)
	ListQuotes(context.Context, *connect.Request[order.ListQuotesRequest]) (*connect.Response[order.ListQuotesResponse], error)
	// GetQuote returns the quote details for a given quote
	GetQuote(context.Context, *connect.Request[order.GetQuoteRequest]) (*connect.Response[order.GetQuoteResponse], error)
	// CreateQuote creates a new quote
	CreateQuote(context.Context, *connect.Request[order.CreateQuoteRequest]) (*connect.Response[order.CreateQuoteResponse], error)
	// ListShipmentsByOrder returns a list of shipment transactions for a given order id
	ListShipmentsByOrder(context.Context, *connect.Request[order.ListShipmentsByOrderRequest]) (*connect.Response[order.ListShipmentsByOrderResponse], error)
	// GetShipment
	GetShipment(context.Context, *connect.Request[order.GetShipmentRequest]) (*connect.Response[order.GetShipmentResponse], error)
	// GetPackingList returns the packing list for a given invoice id
	GetPackingList(context.Context, *connect.Request[order.GetPackingListRequest]) (*connect.Response[order.GetPackingListResponse], error)
	ListPackingListsByOrder(context.Context, *connect.Request[order.ListPackingListsByOrderRequest]) (*connect.Response[order.ListPackingListsByOrderResponse], error)
}

// NewOrderServiceClient constructs a client for the order.v1.OrderService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	orderServiceMethods := order.File_order_proto.Services().ByName("OrderService").Methods()
	return &orderServiceClient{
		listOrders: connect.NewClient[order.ListOrdersRequest, order.ListOrdersResponse](
			httpClient,
			baseURL+OrderServiceListOrdersProcedure,
			connect.WithSchema(orderServiceMethods.ByName("ListOrders")),
			connect.WithClientOptions(opts...),
		),
		getOrder: connect.NewClient[order.GetOrderRequest, order.GetOrderResponse](
			httpClient,
			baseURL+OrderServiceGetOrderProcedure,
			connect.WithSchema(orderServiceMethods.ByName("GetOrder")),
			connect.WithClientOptions(opts...),
		),
		createOrder: connect.NewClient[order.CreateOrderRequest, order.CreateOrderResponse](
			httpClient,
			baseURL+OrderServiceCreateOrderProcedure,
			connect.WithSchema(orderServiceMethods.ByName("CreateOrder")),
			connect.WithClientOptions(opts...),
		),
		listQuotes: connect.NewClient[order.ListQuotesRequest, order.ListQuotesResponse](
			httpClient,
			baseURL+OrderServiceListQuotesProcedure,
			connect.WithSchema(orderServiceMethods.ByName("ListQuotes")),
			connect.WithClientOptions(opts...),
		),
		getQuote: connect.NewClient[order.GetQuoteRequest, order.GetQuoteResponse](
			httpClient,
			baseURL+OrderServiceGetQuoteProcedure,
			connect.WithSchema(orderServiceMethods.ByName("GetQuote")),
			connect.WithClientOptions(opts...),
		),
		createQuote: connect.NewClient[order.CreateQuoteRequest, order.CreateQuoteResponse](
			httpClient,
			baseURL+OrderServiceCreateQuoteProcedure,
			connect.WithSchema(orderServiceMethods.ByName("CreateQuote")),
			connect.WithClientOptions(opts...),
		),
		listShipmentsByOrder: connect.NewClient[order.ListShipmentsByOrderRequest, order.ListShipmentsByOrderResponse](
			httpClient,
			baseURL+OrderServiceListShipmentsByOrderProcedure,
			connect.WithSchema(orderServiceMethods.ByName("ListShipmentsByOrder")),
			connect.WithClientOptions(opts...),
		),
		getShipment: connect.NewClient[order.GetShipmentRequest, order.GetShipmentResponse](
			httpClient,
			baseURL+OrderServiceGetShipmentProcedure,
			connect.WithSchema(orderServiceMethods.ByName("GetShipment")),
			connect.WithClientOptions(opts...),
		),
		getPackingList: connect.NewClient[order.GetPackingListRequest, order.GetPackingListResponse](
			httpClient,
			baseURL+OrderServiceGetPackingListProcedure,
			connect.WithSchema(orderServiceMethods.ByName("GetPackingList")),
			connect.WithClientOptions(opts...),
		),
		listPackingListsByOrder: connect.NewClient[order.ListPackingListsByOrderRequest, order.ListPackingListsByOrderResponse](
			httpClient,
			baseURL+OrderServiceListPackingListsByOrderProcedure,
			connect.WithSchema(orderServiceMethods.ByName("ListPackingListsByOrder")),
			connect.WithClientOptions(opts...),
		),
	}
}

// orderServiceClient implements OrderServiceClient.
type orderServiceClient struct {
	listOrders              *connect.Client[order.ListOrdersRequest, order.ListOrdersResponse]
	getOrder                *connect.Client[order.GetOrderRequest, order.GetOrderResponse]
	createOrder             *connect.Client[order.CreateOrderRequest, order.CreateOrderResponse]
	listQuotes              *connect.Client[order.ListQuotesRequest, order.ListQuotesResponse]
	getQuote                *connect.Client[order.GetQuoteRequest, order.GetQuoteResponse]
	createQuote             *connect.Client[order.CreateQuoteRequest, order.CreateQuoteResponse]
	listShipmentsByOrder    *connect.Client[order.ListShipmentsByOrderRequest, order.ListShipmentsByOrderResponse]
	getShipment             *connect.Client[order.GetShipmentRequest, order.GetShipmentResponse]
	getPackingList          *connect.Client[order.GetPackingListRequest, order.GetPackingListResponse]
	listPackingListsByOrder *connect.Client[order.ListPackingListsByOrderRequest, order.ListPackingListsByOrderResponse]
}

// ListOrders calls order.v1.OrderService.ListOrders.
func (c *orderServiceClient) ListOrders(ctx context.Context, req *connect.Request[order.ListOrdersRequest]) (*connect.Response[order.ListOrdersResponse], error) {
	return c.listOrders.CallUnary(ctx, req)
}

// GetOrder calls order.v1.OrderService.GetOrder.
func (c *orderServiceClient) GetOrder(ctx context.Context, req *connect.Request[order.GetOrderRequest]) (*connect.Response[order.GetOrderResponse], error) {
	return c.getOrder.CallUnary(ctx, req)
}

// CreateOrder calls order.v1.OrderService.CreateOrder.
func (c *orderServiceClient) CreateOrder(ctx context.Context, req *connect.Request[order.CreateOrderRequest]) (*connect.Response[order.CreateOrderResponse], error) {
	return c.createOrder.CallUnary(ctx, req)
}

// ListQuotes calls order.v1.OrderService.ListQuotes.
func (c *orderServiceClient) ListQuotes(ctx context.Context, req *connect.Request[order.ListQuotesRequest]) (*connect.Response[order.ListQuotesResponse], error) {
	return c.listQuotes.CallUnary(ctx, req)
}

// GetQuote calls order.v1.OrderService.GetQuote.
func (c *orderServiceClient) GetQuote(ctx context.Context, req *connect.Request[order.GetQuoteRequest]) (*connect.Response[order.GetQuoteResponse], error) {
	return c.getQuote.CallUnary(ctx, req)
}

// CreateQuote calls order.v1.OrderService.CreateQuote.
func (c *orderServiceClient) CreateQuote(ctx context.Context, req *connect.Request[order.CreateQuoteRequest]) (*connect.Response[order.CreateQuoteResponse], error) {
	return c.createQuote.CallUnary(ctx, req)
}

// ListShipmentsByOrder calls order.v1.OrderService.ListShipmentsByOrder.
func (c *orderServiceClient) ListShipmentsByOrder(ctx context.Context, req *connect.Request[order.ListShipmentsByOrderRequest]) (*connect.Response[order.ListShipmentsByOrderResponse], error) {
	return c.listShipmentsByOrder.CallUnary(ctx, req)
}

// GetShipment calls order.v1.OrderService.GetShipment.
func (c *orderServiceClient) GetShipment(ctx context.Context, req *connect.Request[order.GetShipmentRequest]) (*connect.Response[order.GetShipmentResponse], error) {
	return c.getShipment.CallUnary(ctx, req)
}

// GetPackingList calls order.v1.OrderService.GetPackingList.
func (c *orderServiceClient) GetPackingList(ctx context.Context, req *connect.Request[order.GetPackingListRequest]) (*connect.Response[order.GetPackingListResponse], error) {
	return c.getPackingList.CallUnary(ctx, req)
}

// ListPackingListsByOrder calls order.v1.OrderService.ListPackingListsByOrder.
func (c *orderServiceClient) ListPackingListsByOrder(ctx context.Context, req *connect.Request[order.ListPackingListsByOrderRequest]) (*connect.Response[order.ListPackingListsByOrderResponse], error) {
	return c.listPackingListsByOrder.CallUnary(ctx, req)
}

// OrderServiceHandler is an implementation of the order.v1.OrderService service.
type OrderServiceHandler interface {
	// ListOrders returns a list of orders for a given customer
	ListOrders(context.Context, *connect.Request[order.ListOrdersRequest]) (*connect.Response[order.ListOrdersResponse], error)
	// GetOrder returns the order details for a given order id
	GetOrder(context.Context, *connect.Request[order.GetOrderRequest]) (*connect.Response[order.GetOrderResponse], error)
	// CreateOrder creates a new order
	CreateOrder(context.Context, *connect.Request[order.CreateOrderRequest]) (*connect.Response[order.CreateOrderResponse], error)
	ListQuotes(context.Context, *connect.Request[order.ListQuotesRequest]) (*connect.Response[order.ListQuotesResponse], error)
	// GetQuote returns the quote details for a given quote
	GetQuote(context.Context, *connect.Request[order.GetQuoteRequest]) (*connect.Response[order.GetQuoteResponse], error)
	// CreateQuote creates a new quote
	CreateQuote(context.Context, *connect.Request[order.CreateQuoteRequest]) (*connect.Response[order.CreateQuoteResponse], error)
	// ListShipmentsByOrder returns a list of shipment transactions for a given order id
	ListShipmentsByOrder(context.Context, *connect.Request[order.ListShipmentsByOrderRequest]) (*connect.Response[order.ListShipmentsByOrderResponse], error)
	// GetShipment
	GetShipment(context.Context, *connect.Request[order.GetShipmentRequest]) (*connect.Response[order.GetShipmentResponse], error)
	// GetPackingList returns the packing list for a given invoice id
	GetPackingList(context.Context, *connect.Request[order.GetPackingListRequest]) (*connect.Response[order.GetPackingListResponse], error)
	ListPackingListsByOrder(context.Context, *connect.Request[order.ListPackingListsByOrderRequest]) (*connect.Response[order.ListPackingListsByOrderResponse], error)
}

// NewOrderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrderServiceHandler(svc OrderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orderServiceMethods := order.File_order_proto.Services().ByName("OrderService").Methods()
	orderServiceListOrdersHandler := connect.NewUnaryHandler(
		OrderServiceListOrdersProcedure,
		svc.ListOrders,
		connect.WithSchema(orderServiceMethods.ByName("ListOrders")),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceGetOrderHandler := connect.NewUnaryHandler(
		OrderServiceGetOrderProcedure,
		svc.GetOrder,
		connect.WithSchema(orderServiceMethods.ByName("GetOrder")),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceCreateOrderHandler := connect.NewUnaryHandler(
		OrderServiceCreateOrderProcedure,
		svc.CreateOrder,
		connect.WithSchema(orderServiceMethods.ByName("CreateOrder")),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceListQuotesHandler := connect.NewUnaryHandler(
		OrderServiceListQuotesProcedure,
		svc.ListQuotes,
		connect.WithSchema(orderServiceMethods.ByName("ListQuotes")),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceGetQuoteHandler := connect.NewUnaryHandler(
		OrderServiceGetQuoteProcedure,
		svc.GetQuote,
		connect.WithSchema(orderServiceMethods.ByName("GetQuote")),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceCreateQuoteHandler := connect.NewUnaryHandler(
		OrderServiceCreateQuoteProcedure,
		svc.CreateQuote,
		connect.WithSchema(orderServiceMethods.ByName("CreateQuote")),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceListShipmentsByOrderHandler := connect.NewUnaryHandler(
		OrderServiceListShipmentsByOrderProcedure,
		svc.ListShipmentsByOrder,
		connect.WithSchema(orderServiceMethods.ByName("ListShipmentsByOrder")),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceGetShipmentHandler := connect.NewUnaryHandler(
		OrderServiceGetShipmentProcedure,
		svc.GetShipment,
		connect.WithSchema(orderServiceMethods.ByName("GetShipment")),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceGetPackingListHandler := connect.NewUnaryHandler(
		OrderServiceGetPackingListProcedure,
		svc.GetPackingList,
		connect.WithSchema(orderServiceMethods.ByName("GetPackingList")),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceListPackingListsByOrderHandler := connect.NewUnaryHandler(
		OrderServiceListPackingListsByOrderProcedure,
		svc.ListPackingListsByOrder,
		connect.WithSchema(orderServiceMethods.ByName("ListPackingListsByOrder")),
		connect.WithHandlerOptions(opts...),
	)
	return "/order.v1.OrderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrderServiceListOrdersProcedure:
			orderServiceListOrdersHandler.ServeHTTP(w, r)
		case OrderServiceGetOrderProcedure:
			orderServiceGetOrderHandler.ServeHTTP(w, r)
		case OrderServiceCreateOrderProcedure:
			orderServiceCreateOrderHandler.ServeHTTP(w, r)
		case OrderServiceListQuotesProcedure:
			orderServiceListQuotesHandler.ServeHTTP(w, r)
		case OrderServiceGetQuoteProcedure:
			orderServiceGetQuoteHandler.ServeHTTP(w, r)
		case OrderServiceCreateQuoteProcedure:
			orderServiceCreateQuoteHandler.ServeHTTP(w, r)
		case OrderServiceListShipmentsByOrderProcedure:
			orderServiceListShipmentsByOrderHandler.ServeHTTP(w, r)
		case OrderServiceGetShipmentProcedure:
			orderServiceGetShipmentHandler.ServeHTTP(w, r)
		case OrderServiceGetPackingListProcedure:
			orderServiceGetPackingListHandler.ServeHTTP(w, r)
		case OrderServiceListPackingListsByOrderProcedure:
			orderServiceListPackingListsByOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrderServiceHandler struct{}

func (UnimplementedOrderServiceHandler) ListOrders(context.Context, *connect.Request[order.ListOrdersRequest]) (*connect.Response[order.ListOrdersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.ListOrders is not implemented"))
}

func (UnimplementedOrderServiceHandler) GetOrder(context.Context, *connect.Request[order.GetOrderRequest]) (*connect.Response[order.GetOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.GetOrder is not implemented"))
}

func (UnimplementedOrderServiceHandler) CreateOrder(context.Context, *connect.Request[order.CreateOrderRequest]) (*connect.Response[order.CreateOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.CreateOrder is not implemented"))
}

func (UnimplementedOrderServiceHandler) ListQuotes(context.Context, *connect.Request[order.ListQuotesRequest]) (*connect.Response[order.ListQuotesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.ListQuotes is not implemented"))
}

func (UnimplementedOrderServiceHandler) GetQuote(context.Context, *connect.Request[order.GetQuoteRequest]) (*connect.Response[order.GetQuoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.GetQuote is not implemented"))
}

func (UnimplementedOrderServiceHandler) CreateQuote(context.Context, *connect.Request[order.CreateQuoteRequest]) (*connect.Response[order.CreateQuoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.CreateQuote is not implemented"))
}

func (UnimplementedOrderServiceHandler) ListShipmentsByOrder(context.Context, *connect.Request[order.ListShipmentsByOrderRequest]) (*connect.Response[order.ListShipmentsByOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.ListShipmentsByOrder is not implemented"))
}

func (UnimplementedOrderServiceHandler) GetShipment(context.Context, *connect.Request[order.GetShipmentRequest]) (*connect.Response[order.GetShipmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.GetShipment is not implemented"))
}

func (UnimplementedOrderServiceHandler) GetPackingList(context.Context, *connect.Request[order.GetPackingListRequest]) (*connect.Response[order.GetPackingListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.GetPackingList is not implemented"))
}

func (UnimplementedOrderServiceHandler) ListPackingListsByOrder(context.Context, *connect.Request[order.ListPackingListsByOrderRequest]) (*connect.Response[order.ListPackingListsByOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderService.ListPackingListsByOrder is not implemented"))
}
