// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: catalog.proto

package catalogconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	catalog "github.com/materials-resources/store-api/internal/grpc-client/catalog"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CatalogServiceName is the fully-qualified name of the CatalogService service.
	CatalogServiceName = "catalog.v1.CatalogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CatalogServiceListProductsProcedure is the fully-qualified name of the CatalogService's
	// ListProducts RPC.
	CatalogServiceListProductsProcedure = "/catalog.v1.CatalogService/ListProducts"
	// CatalogServiceCreateProductProcedure is the fully-qualified name of the CatalogService's
	// CreateProduct RPC.
	CatalogServiceCreateProductProcedure = "/catalog.v1.CatalogService/CreateProduct"
	// CatalogServiceGetProductProcedure is the fully-qualified name of the CatalogService's GetProduct
	// RPC.
	CatalogServiceGetProductProcedure = "/catalog.v1.CatalogService/GetProduct"
	// CatalogServiceUpdateProductProcedure is the fully-qualified name of the CatalogService's
	// UpdateProduct RPC.
	CatalogServiceUpdateProductProcedure = "/catalog.v1.CatalogService/UpdateProduct"
	// CatalogServiceDeleteProductProcedure is the fully-qualified name of the CatalogService's
	// DeleteProduct RPC.
	CatalogServiceDeleteProductProcedure = "/catalog.v1.CatalogService/DeleteProduct"
	// CatalogServiceListGroupsProcedure is the fully-qualified name of the CatalogService's ListGroups
	// RPC.
	CatalogServiceListGroupsProcedure = "/catalog.v1.CatalogService/ListGroups"
	// CatalogServiceCreateGroupProcedure is the fully-qualified name of the CatalogService's
	// CreateGroup RPC.
	CatalogServiceCreateGroupProcedure = "/catalog.v1.CatalogService/CreateGroup"
	// CatalogServiceGetGroupProcedure is the fully-qualified name of the CatalogService's GetGroup RPC.
	CatalogServiceGetGroupProcedure = "/catalog.v1.CatalogService/GetGroup"
	// CatalogServiceUpdateGroupProcedure is the fully-qualified name of the CatalogService's
	// UpdateGroup RPC.
	CatalogServiceUpdateGroupProcedure = "/catalog.v1.CatalogService/UpdateGroup"
	// CatalogServiceDeleteGroupProcedure is the fully-qualified name of the CatalogService's
	// DeleteGroup RPC.
	CatalogServiceDeleteGroupProcedure = "/catalog.v1.CatalogService/DeleteGroup"
	// CatalogServiceListSuppliersProcedure is the fully-qualified name of the CatalogService's
	// ListSuppliers RPC.
	CatalogServiceListSuppliersProcedure = "/catalog.v1.CatalogService/ListSuppliers"
	// CatalogServiceGetSupplierProcedure is the fully-qualified name of the CatalogService's
	// GetSupplier RPC.
	CatalogServiceGetSupplierProcedure = "/catalog.v1.CatalogService/GetSupplier"
	// CatalogServiceCreateSupplierProcedure is the fully-qualified name of the CatalogService's
	// CreateSupplier RPC.
	CatalogServiceCreateSupplierProcedure = "/catalog.v1.CatalogService/CreateSupplier"
	// CatalogServiceUpdateSupplierProcedure is the fully-qualified name of the CatalogService's
	// UpdateSupplier RPC.
	CatalogServiceUpdateSupplierProcedure = "/catalog.v1.CatalogService/UpdateSupplier"
	// CatalogServiceSetPrimarySupplierProcedure is the fully-qualified name of the CatalogService's
	// SetPrimarySupplier RPC.
	CatalogServiceSetPrimarySupplierProcedure = "/catalog.v1.CatalogService/SetPrimarySupplier"
	// CatalogServiceGetProductBySupplierProcedure is the fully-qualified name of the CatalogService's
	// GetProductBySupplier RPC.
	CatalogServiceGetProductBySupplierProcedure = "/catalog.v1.CatalogService/GetProductBySupplier"
)

// CatalogServiceClient is a client for the catalog.v1.CatalogService service.
type CatalogServiceClient interface {
	// ListProducts returns a List of products
	ListProducts(context.Context, *connect.Request[catalog.ListProductsRequest]) (*connect.Response[catalog.ListProductsResponse], error)
	// CreateProduct creates a product
	CreateProduct(context.Context, *connect.Request[catalog.CreateProductRequest]) (*connect.Response[catalog.CreateProductResponse], error)
	// GetProduct returns a product
	GetProduct(context.Context, *connect.Request[catalog.GetProductRequest]) (*connect.Response[catalog.GetProductResponse], error)
	// UpdateProduct updates a product
	UpdateProduct(context.Context, *connect.Request[catalog.UpdateProductRequest]) (*connect.Response[catalog.UpdateProductResponse], error)
	// DeleteProduct deletes a product
	DeleteProduct(context.Context, *connect.Request[catalog.DeleteProductRequest]) (*connect.Response[catalog.DeleteProductResponse], error)
	// ListGroups returns a List of product groups
	ListGroups(context.Context, *connect.Request[catalog.ListGroupRequest]) (*connect.Response[catalog.ListGroupResponse], error)
	// CreateGroup creates a new product group
	CreateGroup(context.Context, *connect.Request[catalog.CreateGroupRequest]) (*connect.Response[catalog.CreateGroupResponse], error)
	// ReadGroup returns a product group with products
	GetGroup(context.Context, *connect.Request[catalog.GetGroupRequest]) (*connect.Response[catalog.GetGroupResponse], error)
	// UpdateGroup updates a product group
	UpdateGroup(context.Context, *connect.Request[catalog.UpdateGroupRequest]) (*connect.Response[catalog.UpdateGroupResponse], error)
	// DeleteGroup deletes a product group
	DeleteGroup(context.Context, *connect.Request[catalog.DeleteGroupRequest]) (*connect.Response[catalog.DeleteGroupResponse], error)
	// ListSuppliers returns a List of suppliers for a product
	ListSuppliers(context.Context, *connect.Request[catalog.ListSuppliersRequest]) (*connect.Response[catalog.ListSuppliersResponse], error)
	// GetSupplier returns the supplier of a product
	GetSupplier(context.Context, *connect.Request[catalog.GetSupplierRequest]) (*connect.Response[catalog.GetSupplierResponse], error)
	// CreateSupplier creates a supplier for a product
	CreateSupplier(context.Context, *connect.Request[catalog.CreateSupplierRequest]) (*connect.Response[catalog.CreateSupplierResponse], error)
	// UpdateSupplier updates a supplier for a product
	UpdateSupplier(context.Context, *connect.Request[catalog.UpdateSupplierRequest]) (*connect.Response[catalog.UpdateSupplierResponse], error)
	// SetPrimarySupplier sets the primary supplier for a product
	SetPrimarySupplier(context.Context, *connect.Request[catalog.SetPrimarySupplierRequest]) (*connect.Response[catalog.SetPrimarySupplierResponse], error)
	// GetProductBySupplier returns a product by supplier identifiers
	GetProductBySupplier(context.Context, *connect.Request[catalog.GetProductBySupplierRequest]) (*connect.Response[catalog.GetProductBySupplierResponse], error)
}

// NewCatalogServiceClient constructs a client for the catalog.v1.CatalogService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCatalogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CatalogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	catalogServiceMethods := catalog.File_catalog_proto.Services().ByName("CatalogService").Methods()
	return &catalogServiceClient{
		listProducts: connect.NewClient[catalog.ListProductsRequest, catalog.ListProductsResponse](
			httpClient,
			baseURL+CatalogServiceListProductsProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("ListProducts")),
			connect.WithClientOptions(opts...),
		),
		createProduct: connect.NewClient[catalog.CreateProductRequest, catalog.CreateProductResponse](
			httpClient,
			baseURL+CatalogServiceCreateProductProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("CreateProduct")),
			connect.WithClientOptions(opts...),
		),
		getProduct: connect.NewClient[catalog.GetProductRequest, catalog.GetProductResponse](
			httpClient,
			baseURL+CatalogServiceGetProductProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("GetProduct")),
			connect.WithClientOptions(opts...),
		),
		updateProduct: connect.NewClient[catalog.UpdateProductRequest, catalog.UpdateProductResponse](
			httpClient,
			baseURL+CatalogServiceUpdateProductProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("UpdateProduct")),
			connect.WithClientOptions(opts...),
		),
		deleteProduct: connect.NewClient[catalog.DeleteProductRequest, catalog.DeleteProductResponse](
			httpClient,
			baseURL+CatalogServiceDeleteProductProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("DeleteProduct")),
			connect.WithClientOptions(opts...),
		),
		listGroups: connect.NewClient[catalog.ListGroupRequest, catalog.ListGroupResponse](
			httpClient,
			baseURL+CatalogServiceListGroupsProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("ListGroups")),
			connect.WithClientOptions(opts...),
		),
		createGroup: connect.NewClient[catalog.CreateGroupRequest, catalog.CreateGroupResponse](
			httpClient,
			baseURL+CatalogServiceCreateGroupProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("CreateGroup")),
			connect.WithClientOptions(opts...),
		),
		getGroup: connect.NewClient[catalog.GetGroupRequest, catalog.GetGroupResponse](
			httpClient,
			baseURL+CatalogServiceGetGroupProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("GetGroup")),
			connect.WithClientOptions(opts...),
		),
		updateGroup: connect.NewClient[catalog.UpdateGroupRequest, catalog.UpdateGroupResponse](
			httpClient,
			baseURL+CatalogServiceUpdateGroupProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("UpdateGroup")),
			connect.WithClientOptions(opts...),
		),
		deleteGroup: connect.NewClient[catalog.DeleteGroupRequest, catalog.DeleteGroupResponse](
			httpClient,
			baseURL+CatalogServiceDeleteGroupProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("DeleteGroup")),
			connect.WithClientOptions(opts...),
		),
		listSuppliers: connect.NewClient[catalog.ListSuppliersRequest, catalog.ListSuppliersResponse](
			httpClient,
			baseURL+CatalogServiceListSuppliersProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("ListSuppliers")),
			connect.WithClientOptions(opts...),
		),
		getSupplier: connect.NewClient[catalog.GetSupplierRequest, catalog.GetSupplierResponse](
			httpClient,
			baseURL+CatalogServiceGetSupplierProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("GetSupplier")),
			connect.WithClientOptions(opts...),
		),
		createSupplier: connect.NewClient[catalog.CreateSupplierRequest, catalog.CreateSupplierResponse](
			httpClient,
			baseURL+CatalogServiceCreateSupplierProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("CreateSupplier")),
			connect.WithClientOptions(opts...),
		),
		updateSupplier: connect.NewClient[catalog.UpdateSupplierRequest, catalog.UpdateSupplierResponse](
			httpClient,
			baseURL+CatalogServiceUpdateSupplierProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("UpdateSupplier")),
			connect.WithClientOptions(opts...),
		),
		setPrimarySupplier: connect.NewClient[catalog.SetPrimarySupplierRequest, catalog.SetPrimarySupplierResponse](
			httpClient,
			baseURL+CatalogServiceSetPrimarySupplierProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("SetPrimarySupplier")),
			connect.WithClientOptions(opts...),
		),
		getProductBySupplier: connect.NewClient[catalog.GetProductBySupplierRequest, catalog.GetProductBySupplierResponse](
			httpClient,
			baseURL+CatalogServiceGetProductBySupplierProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("GetProductBySupplier")),
			connect.WithClientOptions(opts...),
		),
	}
}

// catalogServiceClient implements CatalogServiceClient.
type catalogServiceClient struct {
	listProducts         *connect.Client[catalog.ListProductsRequest, catalog.ListProductsResponse]
	createProduct        *connect.Client[catalog.CreateProductRequest, catalog.CreateProductResponse]
	getProduct           *connect.Client[catalog.GetProductRequest, catalog.GetProductResponse]
	updateProduct        *connect.Client[catalog.UpdateProductRequest, catalog.UpdateProductResponse]
	deleteProduct        *connect.Client[catalog.DeleteProductRequest, catalog.DeleteProductResponse]
	listGroups           *connect.Client[catalog.ListGroupRequest, catalog.ListGroupResponse]
	createGroup          *connect.Client[catalog.CreateGroupRequest, catalog.CreateGroupResponse]
	getGroup             *connect.Client[catalog.GetGroupRequest, catalog.GetGroupResponse]
	updateGroup          *connect.Client[catalog.UpdateGroupRequest, catalog.UpdateGroupResponse]
	deleteGroup          *connect.Client[catalog.DeleteGroupRequest, catalog.DeleteGroupResponse]
	listSuppliers        *connect.Client[catalog.ListSuppliersRequest, catalog.ListSuppliersResponse]
	getSupplier          *connect.Client[catalog.GetSupplierRequest, catalog.GetSupplierResponse]
	createSupplier       *connect.Client[catalog.CreateSupplierRequest, catalog.CreateSupplierResponse]
	updateSupplier       *connect.Client[catalog.UpdateSupplierRequest, catalog.UpdateSupplierResponse]
	setPrimarySupplier   *connect.Client[catalog.SetPrimarySupplierRequest, catalog.SetPrimarySupplierResponse]
	getProductBySupplier *connect.Client[catalog.GetProductBySupplierRequest, catalog.GetProductBySupplierResponse]
}

// ListProducts calls catalog.v1.CatalogService.ListProducts.
func (c *catalogServiceClient) ListProducts(ctx context.Context, req *connect.Request[catalog.ListProductsRequest]) (*connect.Response[catalog.ListProductsResponse], error) {
	return c.listProducts.CallUnary(ctx, req)
}

// CreateProduct calls catalog.v1.CatalogService.CreateProduct.
func (c *catalogServiceClient) CreateProduct(ctx context.Context, req *connect.Request[catalog.CreateProductRequest]) (*connect.Response[catalog.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// GetProduct calls catalog.v1.CatalogService.GetProduct.
func (c *catalogServiceClient) GetProduct(ctx context.Context, req *connect.Request[catalog.GetProductRequest]) (*connect.Response[catalog.GetProductResponse], error) {
	return c.getProduct.CallUnary(ctx, req)
}

// UpdateProduct calls catalog.v1.CatalogService.UpdateProduct.
func (c *catalogServiceClient) UpdateProduct(ctx context.Context, req *connect.Request[catalog.UpdateProductRequest]) (*connect.Response[catalog.UpdateProductResponse], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// DeleteProduct calls catalog.v1.CatalogService.DeleteProduct.
func (c *catalogServiceClient) DeleteProduct(ctx context.Context, req *connect.Request[catalog.DeleteProductRequest]) (*connect.Response[catalog.DeleteProductResponse], error) {
	return c.deleteProduct.CallUnary(ctx, req)
}

// ListGroups calls catalog.v1.CatalogService.ListGroups.
func (c *catalogServiceClient) ListGroups(ctx context.Context, req *connect.Request[catalog.ListGroupRequest]) (*connect.Response[catalog.ListGroupResponse], error) {
	return c.listGroups.CallUnary(ctx, req)
}

// CreateGroup calls catalog.v1.CatalogService.CreateGroup.
func (c *catalogServiceClient) CreateGroup(ctx context.Context, req *connect.Request[catalog.CreateGroupRequest]) (*connect.Response[catalog.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// GetGroup calls catalog.v1.CatalogService.GetGroup.
func (c *catalogServiceClient) GetGroup(ctx context.Context, req *connect.Request[catalog.GetGroupRequest]) (*connect.Response[catalog.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// UpdateGroup calls catalog.v1.CatalogService.UpdateGroup.
func (c *catalogServiceClient) UpdateGroup(ctx context.Context, req *connect.Request[catalog.UpdateGroupRequest]) (*connect.Response[catalog.UpdateGroupResponse], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// DeleteGroup calls catalog.v1.CatalogService.DeleteGroup.
func (c *catalogServiceClient) DeleteGroup(ctx context.Context, req *connect.Request[catalog.DeleteGroupRequest]) (*connect.Response[catalog.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// ListSuppliers calls catalog.v1.CatalogService.ListSuppliers.
func (c *catalogServiceClient) ListSuppliers(ctx context.Context, req *connect.Request[catalog.ListSuppliersRequest]) (*connect.Response[catalog.ListSuppliersResponse], error) {
	return c.listSuppliers.CallUnary(ctx, req)
}

// GetSupplier calls catalog.v1.CatalogService.GetSupplier.
func (c *catalogServiceClient) GetSupplier(ctx context.Context, req *connect.Request[catalog.GetSupplierRequest]) (*connect.Response[catalog.GetSupplierResponse], error) {
	return c.getSupplier.CallUnary(ctx, req)
}

// CreateSupplier calls catalog.v1.CatalogService.CreateSupplier.
func (c *catalogServiceClient) CreateSupplier(ctx context.Context, req *connect.Request[catalog.CreateSupplierRequest]) (*connect.Response[catalog.CreateSupplierResponse], error) {
	return c.createSupplier.CallUnary(ctx, req)
}

// UpdateSupplier calls catalog.v1.CatalogService.UpdateSupplier.
func (c *catalogServiceClient) UpdateSupplier(ctx context.Context, req *connect.Request[catalog.UpdateSupplierRequest]) (*connect.Response[catalog.UpdateSupplierResponse], error) {
	return c.updateSupplier.CallUnary(ctx, req)
}

// SetPrimarySupplier calls catalog.v1.CatalogService.SetPrimarySupplier.
func (c *catalogServiceClient) SetPrimarySupplier(ctx context.Context, req *connect.Request[catalog.SetPrimarySupplierRequest]) (*connect.Response[catalog.SetPrimarySupplierResponse], error) {
	return c.setPrimarySupplier.CallUnary(ctx, req)
}

// GetProductBySupplier calls catalog.v1.CatalogService.GetProductBySupplier.
func (c *catalogServiceClient) GetProductBySupplier(ctx context.Context, req *connect.Request[catalog.GetProductBySupplierRequest]) (*connect.Response[catalog.GetProductBySupplierResponse], error) {
	return c.getProductBySupplier.CallUnary(ctx, req)
}

// CatalogServiceHandler is an implementation of the catalog.v1.CatalogService service.
type CatalogServiceHandler interface {
	// ListProducts returns a List of products
	ListProducts(context.Context, *connect.Request[catalog.ListProductsRequest]) (*connect.Response[catalog.ListProductsResponse], error)
	// CreateProduct creates a product
	CreateProduct(context.Context, *connect.Request[catalog.CreateProductRequest]) (*connect.Response[catalog.CreateProductResponse], error)
	// GetProduct returns a product
	GetProduct(context.Context, *connect.Request[catalog.GetProductRequest]) (*connect.Response[catalog.GetProductResponse], error)
	// UpdateProduct updates a product
	UpdateProduct(context.Context, *connect.Request[catalog.UpdateProductRequest]) (*connect.Response[catalog.UpdateProductResponse], error)
	// DeleteProduct deletes a product
	DeleteProduct(context.Context, *connect.Request[catalog.DeleteProductRequest]) (*connect.Response[catalog.DeleteProductResponse], error)
	// ListGroups returns a List of product groups
	ListGroups(context.Context, *connect.Request[catalog.ListGroupRequest]) (*connect.Response[catalog.ListGroupResponse], error)
	// CreateGroup creates a new product group
	CreateGroup(context.Context, *connect.Request[catalog.CreateGroupRequest]) (*connect.Response[catalog.CreateGroupResponse], error)
	// ReadGroup returns a product group with products
	GetGroup(context.Context, *connect.Request[catalog.GetGroupRequest]) (*connect.Response[catalog.GetGroupResponse], error)
	// UpdateGroup updates a product group
	UpdateGroup(context.Context, *connect.Request[catalog.UpdateGroupRequest]) (*connect.Response[catalog.UpdateGroupResponse], error)
	// DeleteGroup deletes a product group
	DeleteGroup(context.Context, *connect.Request[catalog.DeleteGroupRequest]) (*connect.Response[catalog.DeleteGroupResponse], error)
	// ListSuppliers returns a List of suppliers for a product
	ListSuppliers(context.Context, *connect.Request[catalog.ListSuppliersRequest]) (*connect.Response[catalog.ListSuppliersResponse], error)
	// GetSupplier returns the supplier of a product
	GetSupplier(context.Context, *connect.Request[catalog.GetSupplierRequest]) (*connect.Response[catalog.GetSupplierResponse], error)
	// CreateSupplier creates a supplier for a product
	CreateSupplier(context.Context, *connect.Request[catalog.CreateSupplierRequest]) (*connect.Response[catalog.CreateSupplierResponse], error)
	// UpdateSupplier updates a supplier for a product
	UpdateSupplier(context.Context, *connect.Request[catalog.UpdateSupplierRequest]) (*connect.Response[catalog.UpdateSupplierResponse], error)
	// SetPrimarySupplier sets the primary supplier for a product
	SetPrimarySupplier(context.Context, *connect.Request[catalog.SetPrimarySupplierRequest]) (*connect.Response[catalog.SetPrimarySupplierResponse], error)
	// GetProductBySupplier returns a product by supplier identifiers
	GetProductBySupplier(context.Context, *connect.Request[catalog.GetProductBySupplierRequest]) (*connect.Response[catalog.GetProductBySupplierResponse], error)
}

// NewCatalogServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCatalogServiceHandler(svc CatalogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	catalogServiceMethods := catalog.File_catalog_proto.Services().ByName("CatalogService").Methods()
	catalogServiceListProductsHandler := connect.NewUnaryHandler(
		CatalogServiceListProductsProcedure,
		svc.ListProducts,
		connect.WithSchema(catalogServiceMethods.ByName("ListProducts")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceCreateProductHandler := connect.NewUnaryHandler(
		CatalogServiceCreateProductProcedure,
		svc.CreateProduct,
		connect.WithSchema(catalogServiceMethods.ByName("CreateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceGetProductHandler := connect.NewUnaryHandler(
		CatalogServiceGetProductProcedure,
		svc.GetProduct,
		connect.WithSchema(catalogServiceMethods.ByName("GetProduct")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceUpdateProductHandler := connect.NewUnaryHandler(
		CatalogServiceUpdateProductProcedure,
		svc.UpdateProduct,
		connect.WithSchema(catalogServiceMethods.ByName("UpdateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceDeleteProductHandler := connect.NewUnaryHandler(
		CatalogServiceDeleteProductProcedure,
		svc.DeleteProduct,
		connect.WithSchema(catalogServiceMethods.ByName("DeleteProduct")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceListGroupsHandler := connect.NewUnaryHandler(
		CatalogServiceListGroupsProcedure,
		svc.ListGroups,
		connect.WithSchema(catalogServiceMethods.ByName("ListGroups")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceCreateGroupHandler := connect.NewUnaryHandler(
		CatalogServiceCreateGroupProcedure,
		svc.CreateGroup,
		connect.WithSchema(catalogServiceMethods.ByName("CreateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceGetGroupHandler := connect.NewUnaryHandler(
		CatalogServiceGetGroupProcedure,
		svc.GetGroup,
		connect.WithSchema(catalogServiceMethods.ByName("GetGroup")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceUpdateGroupHandler := connect.NewUnaryHandler(
		CatalogServiceUpdateGroupProcedure,
		svc.UpdateGroup,
		connect.WithSchema(catalogServiceMethods.ByName("UpdateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceDeleteGroupHandler := connect.NewUnaryHandler(
		CatalogServiceDeleteGroupProcedure,
		svc.DeleteGroup,
		connect.WithSchema(catalogServiceMethods.ByName("DeleteGroup")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceListSuppliersHandler := connect.NewUnaryHandler(
		CatalogServiceListSuppliersProcedure,
		svc.ListSuppliers,
		connect.WithSchema(catalogServiceMethods.ByName("ListSuppliers")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceGetSupplierHandler := connect.NewUnaryHandler(
		CatalogServiceGetSupplierProcedure,
		svc.GetSupplier,
		connect.WithSchema(catalogServiceMethods.ByName("GetSupplier")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceCreateSupplierHandler := connect.NewUnaryHandler(
		CatalogServiceCreateSupplierProcedure,
		svc.CreateSupplier,
		connect.WithSchema(catalogServiceMethods.ByName("CreateSupplier")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceUpdateSupplierHandler := connect.NewUnaryHandler(
		CatalogServiceUpdateSupplierProcedure,
		svc.UpdateSupplier,
		connect.WithSchema(catalogServiceMethods.ByName("UpdateSupplier")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceSetPrimarySupplierHandler := connect.NewUnaryHandler(
		CatalogServiceSetPrimarySupplierProcedure,
		svc.SetPrimarySupplier,
		connect.WithSchema(catalogServiceMethods.ByName("SetPrimarySupplier")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceGetProductBySupplierHandler := connect.NewUnaryHandler(
		CatalogServiceGetProductBySupplierProcedure,
		svc.GetProductBySupplier,
		connect.WithSchema(catalogServiceMethods.ByName("GetProductBySupplier")),
		connect.WithHandlerOptions(opts...),
	)
	return "/catalog.v1.CatalogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CatalogServiceListProductsProcedure:
			catalogServiceListProductsHandler.ServeHTTP(w, r)
		case CatalogServiceCreateProductProcedure:
			catalogServiceCreateProductHandler.ServeHTTP(w, r)
		case CatalogServiceGetProductProcedure:
			catalogServiceGetProductHandler.ServeHTTP(w, r)
		case CatalogServiceUpdateProductProcedure:
			catalogServiceUpdateProductHandler.ServeHTTP(w, r)
		case CatalogServiceDeleteProductProcedure:
			catalogServiceDeleteProductHandler.ServeHTTP(w, r)
		case CatalogServiceListGroupsProcedure:
			catalogServiceListGroupsHandler.ServeHTTP(w, r)
		case CatalogServiceCreateGroupProcedure:
			catalogServiceCreateGroupHandler.ServeHTTP(w, r)
		case CatalogServiceGetGroupProcedure:
			catalogServiceGetGroupHandler.ServeHTTP(w, r)
		case CatalogServiceUpdateGroupProcedure:
			catalogServiceUpdateGroupHandler.ServeHTTP(w, r)
		case CatalogServiceDeleteGroupProcedure:
			catalogServiceDeleteGroupHandler.ServeHTTP(w, r)
		case CatalogServiceListSuppliersProcedure:
			catalogServiceListSuppliersHandler.ServeHTTP(w, r)
		case CatalogServiceGetSupplierProcedure:
			catalogServiceGetSupplierHandler.ServeHTTP(w, r)
		case CatalogServiceCreateSupplierProcedure:
			catalogServiceCreateSupplierHandler.ServeHTTP(w, r)
		case CatalogServiceUpdateSupplierProcedure:
			catalogServiceUpdateSupplierHandler.ServeHTTP(w, r)
		case CatalogServiceSetPrimarySupplierProcedure:
			catalogServiceSetPrimarySupplierHandler.ServeHTTP(w, r)
		case CatalogServiceGetProductBySupplierProcedure:
			catalogServiceGetProductBySupplierHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCatalogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCatalogServiceHandler struct{}

func (UnimplementedCatalogServiceHandler) ListProducts(context.Context, *connect.Request[catalog.ListProductsRequest]) (*connect.Response[catalog.ListProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.ListProducts is not implemented"))
}

func (UnimplementedCatalogServiceHandler) CreateProduct(context.Context, *connect.Request[catalog.CreateProductRequest]) (*connect.Response[catalog.CreateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.CreateProduct is not implemented"))
}

func (UnimplementedCatalogServiceHandler) GetProduct(context.Context, *connect.Request[catalog.GetProductRequest]) (*connect.Response[catalog.GetProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.GetProduct is not implemented"))
}

func (UnimplementedCatalogServiceHandler) UpdateProduct(context.Context, *connect.Request[catalog.UpdateProductRequest]) (*connect.Response[catalog.UpdateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.UpdateProduct is not implemented"))
}

func (UnimplementedCatalogServiceHandler) DeleteProduct(context.Context, *connect.Request[catalog.DeleteProductRequest]) (*connect.Response[catalog.DeleteProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.DeleteProduct is not implemented"))
}

func (UnimplementedCatalogServiceHandler) ListGroups(context.Context, *connect.Request[catalog.ListGroupRequest]) (*connect.Response[catalog.ListGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.ListGroups is not implemented"))
}

func (UnimplementedCatalogServiceHandler) CreateGroup(context.Context, *connect.Request[catalog.CreateGroupRequest]) (*connect.Response[catalog.CreateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.CreateGroup is not implemented"))
}

func (UnimplementedCatalogServiceHandler) GetGroup(context.Context, *connect.Request[catalog.GetGroupRequest]) (*connect.Response[catalog.GetGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.GetGroup is not implemented"))
}

func (UnimplementedCatalogServiceHandler) UpdateGroup(context.Context, *connect.Request[catalog.UpdateGroupRequest]) (*connect.Response[catalog.UpdateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.UpdateGroup is not implemented"))
}

func (UnimplementedCatalogServiceHandler) DeleteGroup(context.Context, *connect.Request[catalog.DeleteGroupRequest]) (*connect.Response[catalog.DeleteGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.DeleteGroup is not implemented"))
}

func (UnimplementedCatalogServiceHandler) ListSuppliers(context.Context, *connect.Request[catalog.ListSuppliersRequest]) (*connect.Response[catalog.ListSuppliersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.ListSuppliers is not implemented"))
}

func (UnimplementedCatalogServiceHandler) GetSupplier(context.Context, *connect.Request[catalog.GetSupplierRequest]) (*connect.Response[catalog.GetSupplierResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.GetSupplier is not implemented"))
}

func (UnimplementedCatalogServiceHandler) CreateSupplier(context.Context, *connect.Request[catalog.CreateSupplierRequest]) (*connect.Response[catalog.CreateSupplierResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.CreateSupplier is not implemented"))
}

func (UnimplementedCatalogServiceHandler) UpdateSupplier(context.Context, *connect.Request[catalog.UpdateSupplierRequest]) (*connect.Response[catalog.UpdateSupplierResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.UpdateSupplier is not implemented"))
}

func (UnimplementedCatalogServiceHandler) SetPrimarySupplier(context.Context, *connect.Request[catalog.SetPrimarySupplierRequest]) (*connect.Response[catalog.SetPrimarySupplierResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.SetPrimarySupplier is not implemented"))
}

func (UnimplementedCatalogServiceHandler) GetProductBySupplier(context.Context, *connect.Request[catalog.GetProductBySupplierRequest]) (*connect.Response[catalog.GetProductBySupplierResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("catalog.v1.CatalogService.GetProductBySupplier is not implemented"))
}
