// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Address
type Address struct {
	ID         string `json:"id"`
	Name       string `json:"name"`
	LineOne    string `json:"line_one"`
	LineTwo    string `json:"line_two"`
	City       string `json:"city"`
	State      string `json:"state"`
	PostalCode string `json:"postal_code"`
	Country    string `json:"country"`
}

// GetID returns the value of ID.
func (s *Address) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Address) GetName() string {
	return s.Name
}

// GetLineOne returns the value of LineOne.
func (s *Address) GetLineOne() string {
	return s.LineOne
}

// GetLineTwo returns the value of LineTwo.
func (s *Address) GetLineTwo() string {
	return s.LineTwo
}

// GetCity returns the value of City.
func (s *Address) GetCity() string {
	return s.City
}

// GetState returns the value of State.
func (s *Address) GetState() string {
	return s.State
}

// GetPostalCode returns the value of PostalCode.
func (s *Address) GetPostalCode() string {
	return s.PostalCode
}

// GetCountry returns the value of Country.
func (s *Address) GetCountry() string {
	return s.Country
}

// SetID sets the value of ID.
func (s *Address) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Address) SetName(val string) {
	s.Name = val
}

// SetLineOne sets the value of LineOne.
func (s *Address) SetLineOne(val string) {
	s.LineOne = val
}

// SetLineTwo sets the value of LineTwo.
func (s *Address) SetLineTwo(val string) {
	s.LineTwo = val
}

// SetCity sets the value of City.
func (s *Address) SetCity(val string) {
	s.City = val
}

// SetState sets the value of State.
func (s *Address) SetState(val string) {
	s.State = val
}

// SetPostalCode sets the value of PostalCode.
func (s *Address) SetPostalCode(val string) {
	s.PostalCode = val
}

// SetCountry sets the value of Country.
func (s *Address) SetCountry(val string) {
	s.Country = val
}

// Ref: #/components/schemas/Aggregation
// Aggregation represents sum type.
type Aggregation struct {
	Type             AggregationType // switch on this field
	RangeAggregation RangeAggregation
	TermsAggregation TermsAggregation
}

// AggregationType is oneOf type of Aggregation.
type AggregationType string

// Possible values for AggregationType.
const (
	RangeAggregationAggregation AggregationType = "RangeAggregation"
	TermsAggregationAggregation AggregationType = "TermsAggregation"
)

// IsRangeAggregation reports whether Aggregation is RangeAggregation.
func (s Aggregation) IsRangeAggregation() bool { return s.Type == RangeAggregationAggregation }

// IsTermsAggregation reports whether Aggregation is TermsAggregation.
func (s Aggregation) IsTermsAggregation() bool { return s.Type == TermsAggregationAggregation }

// SetRangeAggregation sets Aggregation to RangeAggregation.
func (s *Aggregation) SetRangeAggregation(v RangeAggregation) {
	s.Type = RangeAggregationAggregation
	s.RangeAggregation = v
}

// GetRangeAggregation returns RangeAggregation and true boolean if Aggregation is RangeAggregation.
func (s Aggregation) GetRangeAggregation() (v RangeAggregation, ok bool) {
	if !s.IsRangeAggregation() {
		return v, false
	}
	return s.RangeAggregation, true
}

// NewRangeAggregationAggregation returns new Aggregation from RangeAggregation.
func NewRangeAggregationAggregation(v RangeAggregation) Aggregation {
	var s Aggregation
	s.SetRangeAggregation(v)
	return s
}

// SetTermsAggregation sets Aggregation to TermsAggregation.
func (s *Aggregation) SetTermsAggregation(v TermsAggregation) {
	s.Type = TermsAggregationAggregation
	s.TermsAggregation = v
}

// GetTermsAggregation returns TermsAggregation and true boolean if Aggregation is TermsAggregation.
func (s Aggregation) GetTermsAggregation() (v TermsAggregation, ok bool) {
	if !s.IsTermsAggregation() {
		return v, false
	}
	return s.TermsAggregation, true
}

// NewTermsAggregationAggregation returns new Aggregation from TermsAggregation.
func NewTermsAggregationAggregation(v TermsAggregation) Aggregation {
	var s Aggregation
	s.SetTermsAggregation(v)
	return s
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/Branch
type Branch struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *Branch) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Branch) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *Branch) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Branch) SetName(val string) {
	s.Name = val
}

// ContactUsOK is response for ContactUs operation.
type ContactUsOK struct{}

type ContactUsReq struct {
	Name         string `json:"name"`
	Organization string `json:"organization"`
	Email        string `json:"email"`
	Message      string `json:"message"`
	// Phone number in various formats (e.g., 123-456-7890, (123) 456-7890, 123.456.7890).
	Telephone string `json:"telephone"`
}

// GetName returns the value of Name.
func (s *ContactUsReq) GetName() string {
	return s.Name
}

// GetOrganization returns the value of Organization.
func (s *ContactUsReq) GetOrganization() string {
	return s.Organization
}

// GetEmail returns the value of Email.
func (s *ContactUsReq) GetEmail() string {
	return s.Email
}

// GetMessage returns the value of Message.
func (s *ContactUsReq) GetMessage() string {
	return s.Message
}

// GetTelephone returns the value of Telephone.
func (s *ContactUsReq) GetTelephone() string {
	return s.Telephone
}

// SetName sets the value of Name.
func (s *ContactUsReq) SetName(val string) {
	s.Name = val
}

// SetOrganization sets the value of Organization.
func (s *ContactUsReq) SetOrganization(val string) {
	s.Organization = val
}

// SetEmail sets the value of Email.
func (s *ContactUsReq) SetEmail(val string) {
	s.Email = val
}

// SetMessage sets the value of Message.
func (s *ContactUsReq) SetMessage(val string) {
	s.Message = val
}

// SetTelephone sets the value of Telephone.
func (s *ContactUsReq) SetTelephone(val string) {
	s.Telephone = val
}

type CreateQuoteCreated struct {
	// ID of the created quote.
	QuoteID string `json:"quote_id"`
	// Status of the quote creation.
	Status OptString `json:"status"`
}

// GetQuoteID returns the value of QuoteID.
func (s *CreateQuoteCreated) GetQuoteID() string {
	return s.QuoteID
}

// GetStatus returns the value of Status.
func (s *CreateQuoteCreated) GetStatus() OptString {
	return s.Status
}

// SetQuoteID sets the value of QuoteID.
func (s *CreateQuoteCreated) SetQuoteID(val string) {
	s.QuoteID = val
}

// SetStatus sets the value of Status.
func (s *CreateQuoteCreated) SetStatus(val OptString) {
	s.Status = val
}

func (*CreateQuoteCreated) createQuoteRes() {}

type CreateQuoteReq struct {
	Notes string `json:"notes"`
	// Date of the request.  Should be in YYYY-MM-DD format (ISO 8601).
	DateRequested time.Time `json:"date_requested"`
	// List of items for the quote.
	Items []CreateQuoteReqItemsItem `json:"items"`
}

// GetNotes returns the value of Notes.
func (s *CreateQuoteReq) GetNotes() string {
	return s.Notes
}

// GetDateRequested returns the value of DateRequested.
func (s *CreateQuoteReq) GetDateRequested() time.Time {
	return s.DateRequested
}

// GetItems returns the value of Items.
func (s *CreateQuoteReq) GetItems() []CreateQuoteReqItemsItem {
	return s.Items
}

// SetNotes sets the value of Notes.
func (s *CreateQuoteReq) SetNotes(val string) {
	s.Notes = val
}

// SetDateRequested sets the value of DateRequested.
func (s *CreateQuoteReq) SetDateRequested(val time.Time) {
	s.DateRequested = val
}

// SetItems sets the value of Items.
func (s *CreateQuoteReq) SetItems(val []CreateQuoteReqItemsItem) {
	s.Items = val
}

type CreateQuoteReqItemsItem struct {
	// ID of the product.
	ProductID string `json:"product_id"`
	// Quantity of the product.
	Quantity float64 `json:"quantity"`
}

// GetProductID returns the value of ProductID.
func (s *CreateQuoteReqItemsItem) GetProductID() string {
	return s.ProductID
}

// GetQuantity returns the value of Quantity.
func (s *CreateQuoteReqItemsItem) GetQuantity() float64 {
	return s.Quantity
}

// SetProductID sets the value of ProductID.
func (s *CreateQuoteReqItemsItem) SetProductID(val string) {
	s.ProductID = val
}

// SetQuantity sets the value of Quantity.
func (s *CreateQuoteReqItemsItem) SetQuantity(val float64) {
	s.Quantity = val
}

// CreateQuoteUnauthorized is response for CreateQuote operation.
type CreateQuoteUnauthorized struct{}

func (*CreateQuoteUnauthorized) createQuoteRes() {}

type CreateQuoteUnprocessableEntity struct {
	// List of validation errors.
	Errors []CreateQuoteUnprocessableEntityErrorsItem `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *CreateQuoteUnprocessableEntity) GetErrors() []CreateQuoteUnprocessableEntityErrorsItem {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *CreateQuoteUnprocessableEntity) SetErrors(val []CreateQuoteUnprocessableEntityErrorsItem) {
	s.Errors = val
}

func (*CreateQuoteUnprocessableEntity) createQuoteRes() {}

type CreateQuoteUnprocessableEntityErrorsItem struct {
	// The field where the validation error occurred.
	Field OptString `json:"field"`
	// A descriptive error message.
	Message OptString `json:"message"`
}

// GetField returns the value of Field.
func (s *CreateQuoteUnprocessableEntityErrorsItem) GetField() OptString {
	return s.Field
}

// GetMessage returns the value of Message.
func (s *CreateQuoteUnprocessableEntityErrorsItem) GetMessage() OptString {
	return s.Message
}

// SetField sets the value of Field.
func (s *CreateQuoteUnprocessableEntityErrorsItem) SetField(val OptString) {
	s.Field = val
}

// SetMessage sets the value of Message.
func (s *CreateQuoteUnprocessableEntityErrorsItem) SetMessage(val OptString) {
	s.Message = val
}

// Represents error object.
// Ref: #/components/schemas/Error
type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type GetActiveBranchOK struct {
	Branch Branch `json:"branch"`
}

// GetBranch returns the value of Branch.
func (s *GetActiveBranchOK) GetBranch() Branch {
	return s.Branch
}

// SetBranch sets the value of Branch.
func (s *GetActiveBranchOK) SetBranch(val Branch) {
	s.Branch = val
}

func (*GetActiveBranchOK) getActiveBranchRes() {}

// GetActiveBranchUnauthorized is response for GetActiveBranch operation.
type GetActiveBranchUnauthorized struct{}

func (*GetActiveBranchUnauthorized) getActiveBranchRes() {}

// GetInvoiceReportNotFound is response for GetInvoiceReport operation.
type GetInvoiceReportNotFound struct{}

func (*GetInvoiceReportNotFound) getInvoiceReportRes() {}

type GetInvoiceReportOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetInvoiceReportOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetInvoiceReportOK) getInvoiceReportRes() {}

// GetInvoiceReportUnauthorized is response for GetInvoiceReport operation.
type GetInvoiceReportUnauthorized struct{}

func (*GetInvoiceReportUnauthorized) getInvoiceReportRes() {}

// GetOrderNotFound is response for GetOrder operation.
type GetOrderNotFound struct{}

func (*GetOrderNotFound) getOrderRes() {}

type GetOrderOK struct {
	Order Order `json:"order"`
}

// GetOrder returns the value of Order.
func (s *GetOrderOK) GetOrder() Order {
	return s.Order
}

// SetOrder sets the value of Order.
func (s *GetOrderOK) SetOrder(val Order) {
	s.Order = val
}

func (*GetOrderOK) getOrderRes() {}

// GetOrderUnauthorized is response for GetOrder operation.
type GetOrderUnauthorized struct{}

func (*GetOrderUnauthorized) getOrderRes() {}

// GetPackingListReportNotFound is response for GetPackingListReport operation.
type GetPackingListReportNotFound struct{}

func (*GetPackingListReportNotFound) getPackingListReportRes() {}

type GetPackingListReportOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPackingListReportOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetPackingListReportOK) getPackingListReportRes() {}

// GetPackingListReportUnauthorized is response for GetPackingListReport operation.
type GetPackingListReportUnauthorized struct{}

func (*GetPackingListReportUnauthorized) getPackingListReportRes() {}

// GetProductNotFound is response for GetProduct operation.
type GetProductNotFound struct{}

func (*GetProductNotFound) getProductRes() {}

type GetProductOK struct {
	Product Product `json:"product"`
}

// GetProduct returns the value of Product.
func (s *GetProductOK) GetProduct() Product {
	return s.Product
}

// SetProduct sets the value of Product.
func (s *GetProductOK) SetProduct(val Product) {
	s.Product = val
}

func (*GetProductOK) getProductRes() {}

// GetQuoteNotFound is response for GetQuote operation.
type GetQuoteNotFound struct{}

func (*GetQuoteNotFound) getQuoteRes() {}

type GetQuoteOK struct {
	Quote Quote `json:"quote"`
}

// GetQuote returns the value of Quote.
func (s *GetQuoteOK) GetQuote() Quote {
	return s.Quote
}

// SetQuote sets the value of Quote.
func (s *GetQuoteOK) SetQuote(val Quote) {
	s.Quote = val
}

func (*GetQuoteOK) getQuoteRes() {}

// GetQuoteUnauthorized is response for GetQuote operation.
type GetQuoteUnauthorized struct{}

func (*GetQuoteUnauthorized) getQuoteRes() {}

// GetRecentPurchasesNotFound is response for GetRecentPurchases operation.
type GetRecentPurchasesNotFound struct{}

func (*GetRecentPurchasesNotFound) getRecentPurchasesRes() {}

type GetRecentPurchasesOK struct {
	TotalRecords int               `json:"total_records"`
	Purchases    []PurchaseSummary `json:"purchases"`
}

// GetTotalRecords returns the value of TotalRecords.
func (s *GetRecentPurchasesOK) GetTotalRecords() int {
	return s.TotalRecords
}

// GetPurchases returns the value of Purchases.
func (s *GetRecentPurchasesOK) GetPurchases() []PurchaseSummary {
	return s.Purchases
}

// SetTotalRecords sets the value of TotalRecords.
func (s *GetRecentPurchasesOK) SetTotalRecords(val int) {
	s.TotalRecords = val
}

// SetPurchases sets the value of Purchases.
func (s *GetRecentPurchasesOK) SetPurchases(val []PurchaseSummary) {
	s.Purchases = val
}

func (*GetRecentPurchasesOK) getRecentPurchasesRes() {}

// GetRecentPurchasesUnauthorized is response for GetRecentPurchases operation.
type GetRecentPurchasesUnauthorized struct{}

func (*GetRecentPurchasesUnauthorized) getRecentPurchasesRes() {}

// Ref: #/components/schemas/InvoiceAdjustmentType
type InvoiceAdjustmentType string

const (
	InvoiceAdjustmentTypeUnspecified     InvoiceAdjustmentType = "unspecified"
	InvoiceAdjustmentTypeDebitMemo       InvoiceAdjustmentType = "debit_memo"
	InvoiceAdjustmentTypeCreditMemo      InvoiceAdjustmentType = "credit_memo"
	InvoiceAdjustmentTypeBadDebtWriteOff InvoiceAdjustmentType = "bad_debt_write_off"
	InvoiceAdjustmentTypeBadDebtRecovery InvoiceAdjustmentType = "bad_debt_recovery"
	InvoiceAdjustmentTypeInvoice         InvoiceAdjustmentType = "invoice"
)

// AllValues returns all InvoiceAdjustmentType values.
func (InvoiceAdjustmentType) AllValues() []InvoiceAdjustmentType {
	return []InvoiceAdjustmentType{
		InvoiceAdjustmentTypeUnspecified,
		InvoiceAdjustmentTypeDebitMemo,
		InvoiceAdjustmentTypeCreditMemo,
		InvoiceAdjustmentTypeBadDebtWriteOff,
		InvoiceAdjustmentTypeBadDebtRecovery,
		InvoiceAdjustmentTypeInvoice,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InvoiceAdjustmentType) MarshalText() ([]byte, error) {
	switch s {
	case InvoiceAdjustmentTypeUnspecified:
		return []byte(s), nil
	case InvoiceAdjustmentTypeDebitMemo:
		return []byte(s), nil
	case InvoiceAdjustmentTypeCreditMemo:
		return []byte(s), nil
	case InvoiceAdjustmentTypeBadDebtWriteOff:
		return []byte(s), nil
	case InvoiceAdjustmentTypeBadDebtRecovery:
		return []byte(s), nil
	case InvoiceAdjustmentTypeInvoice:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InvoiceAdjustmentType) UnmarshalText(data []byte) error {
	switch InvoiceAdjustmentType(data) {
	case InvoiceAdjustmentTypeUnspecified:
		*s = InvoiceAdjustmentTypeUnspecified
		return nil
	case InvoiceAdjustmentTypeDebitMemo:
		*s = InvoiceAdjustmentTypeDebitMemo
		return nil
	case InvoiceAdjustmentTypeCreditMemo:
		*s = InvoiceAdjustmentTypeCreditMemo
		return nil
	case InvoiceAdjustmentTypeBadDebtWriteOff:
		*s = InvoiceAdjustmentTypeBadDebtWriteOff
		return nil
	case InvoiceAdjustmentTypeBadDebtRecovery:
		*s = InvoiceAdjustmentTypeBadDebtRecovery
		return nil
	case InvoiceAdjustmentTypeInvoice:
		*s = InvoiceAdjustmentTypeInvoice
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/InvoiceSummary
type InvoiceSummary struct {
	ID             string                `json:"id"`
	OrderID        string                `json:"order_id"`
	DateInvoiced   time.Time             `json:"date_invoiced"`
	PaidAmount     float64               `json:"paid_amount"`
	TotalAmount    float64               `json:"total_amount"`
	AdjustmentType InvoiceAdjustmentType `json:"adjustment_type"`
}

// GetID returns the value of ID.
func (s *InvoiceSummary) GetID() string {
	return s.ID
}

// GetOrderID returns the value of OrderID.
func (s *InvoiceSummary) GetOrderID() string {
	return s.OrderID
}

// GetDateInvoiced returns the value of DateInvoiced.
func (s *InvoiceSummary) GetDateInvoiced() time.Time {
	return s.DateInvoiced
}

// GetPaidAmount returns the value of PaidAmount.
func (s *InvoiceSummary) GetPaidAmount() float64 {
	return s.PaidAmount
}

// GetTotalAmount returns the value of TotalAmount.
func (s *InvoiceSummary) GetTotalAmount() float64 {
	return s.TotalAmount
}

// GetAdjustmentType returns the value of AdjustmentType.
func (s *InvoiceSummary) GetAdjustmentType() InvoiceAdjustmentType {
	return s.AdjustmentType
}

// SetID sets the value of ID.
func (s *InvoiceSummary) SetID(val string) {
	s.ID = val
}

// SetOrderID sets the value of OrderID.
func (s *InvoiceSummary) SetOrderID(val string) {
	s.OrderID = val
}

// SetDateInvoiced sets the value of DateInvoiced.
func (s *InvoiceSummary) SetDateInvoiced(val time.Time) {
	s.DateInvoiced = val
}

// SetPaidAmount sets the value of PaidAmount.
func (s *InvoiceSummary) SetPaidAmount(val float64) {
	s.PaidAmount = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *InvoiceSummary) SetTotalAmount(val float64) {
	s.TotalAmount = val
}

// SetAdjustmentType sets the value of AdjustmentType.
func (s *InvoiceSummary) SetAdjustmentType(val InvoiceAdjustmentType) {
	s.AdjustmentType = val
}

type ListCustomerBranchesOK struct {
	Branches []Branch `json:"branches"`
}

// GetBranches returns the value of Branches.
func (s *ListCustomerBranchesOK) GetBranches() []Branch {
	return s.Branches
}

// SetBranches sets the value of Branches.
func (s *ListCustomerBranchesOK) SetBranches(val []Branch) {
	s.Branches = val
}

func (*ListCustomerBranchesOK) listCustomerBranchesRes() {}

// ListCustomerBranchesUnauthorized is response for ListCustomerBranches operation.
type ListCustomerBranchesUnauthorized struct{}

func (*ListCustomerBranchesUnauthorized) listCustomerBranchesRes() {}

type ListInvoicesOK struct {
	TotalRecords int              `json:"total_records"`
	Invoices     []InvoiceSummary `json:"invoices"`
}

// GetTotalRecords returns the value of TotalRecords.
func (s *ListInvoicesOK) GetTotalRecords() int {
	return s.TotalRecords
}

// GetInvoices returns the value of Invoices.
func (s *ListInvoicesOK) GetInvoices() []InvoiceSummary {
	return s.Invoices
}

// SetTotalRecords sets the value of TotalRecords.
func (s *ListInvoicesOK) SetTotalRecords(val int) {
	s.TotalRecords = val
}

// SetInvoices sets the value of Invoices.
func (s *ListInvoicesOK) SetInvoices(val []InvoiceSummary) {
	s.Invoices = val
}

func (*ListInvoicesOK) listInvoicesRes() {}

// ListInvoicesUnauthorized is response for ListInvoices operation.
type ListInvoicesUnauthorized struct{}

func (*ListInvoicesUnauthorized) listInvoicesRes() {}

type ListOrdersOK struct {
	TotalRecords int            `json:"total_records"`
	Orders       []OrderSummary `json:"orders"`
}

// GetTotalRecords returns the value of TotalRecords.
func (s *ListOrdersOK) GetTotalRecords() int {
	return s.TotalRecords
}

// GetOrders returns the value of Orders.
func (s *ListOrdersOK) GetOrders() []OrderSummary {
	return s.Orders
}

// SetTotalRecords sets the value of TotalRecords.
func (s *ListOrdersOK) SetTotalRecords(val int) {
	s.TotalRecords = val
}

// SetOrders sets the value of Orders.
func (s *ListOrdersOK) SetOrders(val []OrderSummary) {
	s.Orders = val
}

func (*ListOrdersOK) listOrdersRes() {}

// ListOrdersUnauthorized is response for ListOrders operation.
type ListOrdersUnauthorized struct{}

func (*ListOrdersUnauthorized) listOrdersRes() {}

type ListQuotesOK struct {
	TotalRecords int            `json:"total_records"`
	Quotes       []QuoteSummary `json:"quotes"`
}

// GetTotalRecords returns the value of TotalRecords.
func (s *ListQuotesOK) GetTotalRecords() int {
	return s.TotalRecords
}

// GetQuotes returns the value of Quotes.
func (s *ListQuotesOK) GetQuotes() []QuoteSummary {
	return s.Quotes
}

// SetTotalRecords sets the value of TotalRecords.
func (s *ListQuotesOK) SetTotalRecords(val int) {
	s.TotalRecords = val
}

// SetQuotes sets the value of Quotes.
func (s *ListQuotesOK) SetQuotes(val []QuoteSummary) {
	s.Quotes = val
}

func (*ListQuotesOK) listQuotesRes() {}

// ListQuotesUnauthorized is response for ListQuotes operation.
type ListQuotesUnauthorized struct{}

func (*ListQuotesUnauthorized) listQuotesRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderItemDisposition returns new OptOrderItemDisposition with value set to v.
func NewOptOrderItemDisposition(v OrderItemDisposition) OptOrderItemDisposition {
	return OptOrderItemDisposition{
		Value: v,
		Set:   true,
	}
}

// OptOrderItemDisposition is optional OrderItemDisposition.
type OptOrderItemDisposition struct {
	Value OrderItemDisposition
	Set   bool
}

// IsSet returns true if OptOrderItemDisposition was set.
func (o OptOrderItemDisposition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderItemDisposition) Reset() {
	var v OrderItemDisposition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderItemDisposition) SetTo(v OrderItemDisposition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderItemDisposition) Get() (v OrderItemDisposition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderItemDisposition) Or(d OrderItemDisposition) OrderItemDisposition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchProductsReqFilters returns new OptSearchProductsReqFilters with value set to v.
func NewOptSearchProductsReqFilters(v SearchProductsReqFilters) OptSearchProductsReqFilters {
	return OptSearchProductsReqFilters{
		Value: v,
		Set:   true,
	}
}

// OptSearchProductsReqFilters is optional SearchProductsReqFilters.
type OptSearchProductsReqFilters struct {
	Value SearchProductsReqFilters
	Set   bool
}

// IsSet returns true if OptSearchProductsReqFilters was set.
func (o OptSearchProductsReqFilters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchProductsReqFilters) Reset() {
	var v SearchProductsReqFilters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchProductsReqFilters) SetTo(v SearchProductsReqFilters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchProductsReqFilters) Get() (v SearchProductsReqFilters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchProductsReqFilters) Or(d SearchProductsReqFilters) SearchProductsReqFilters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Order
type Order struct {
	ID                   string               `json:"id"`
	ContactID            string               `json:"contact_id"`
	BranchID             string               `json:"branch_id"`
	PurchaseOrder        string               `json:"purchase_order"`
	Status               OrderStatus          `json:"status"`
	DateOrdered          time.Time            `json:"date_ordered"`
	DateRequested        time.Time            `json:"date_requested"`
	Taker                OptString            `json:"taker"`
	DeliveryInstructions string               `json:"delivery_instructions"`
	ShippingAddress      Address              `json:"shipping_address"`
	Total                float64              `json:"total"`
	Items                []OrderItem          `json:"items"`
	PackingLists         []PackingListSummary `json:"packing_lists"`
	Invoices             []InvoiceSummary     `json:"invoices"`
}

// GetID returns the value of ID.
func (s *Order) GetID() string {
	return s.ID
}

// GetContactID returns the value of ContactID.
func (s *Order) GetContactID() string {
	return s.ContactID
}

// GetBranchID returns the value of BranchID.
func (s *Order) GetBranchID() string {
	return s.BranchID
}

// GetPurchaseOrder returns the value of PurchaseOrder.
func (s *Order) GetPurchaseOrder() string {
	return s.PurchaseOrder
}

// GetStatus returns the value of Status.
func (s *Order) GetStatus() OrderStatus {
	return s.Status
}

// GetDateOrdered returns the value of DateOrdered.
func (s *Order) GetDateOrdered() time.Time {
	return s.DateOrdered
}

// GetDateRequested returns the value of DateRequested.
func (s *Order) GetDateRequested() time.Time {
	return s.DateRequested
}

// GetTaker returns the value of Taker.
func (s *Order) GetTaker() OptString {
	return s.Taker
}

// GetDeliveryInstructions returns the value of DeliveryInstructions.
func (s *Order) GetDeliveryInstructions() string {
	return s.DeliveryInstructions
}

// GetShippingAddress returns the value of ShippingAddress.
func (s *Order) GetShippingAddress() Address {
	return s.ShippingAddress
}

// GetTotal returns the value of Total.
func (s *Order) GetTotal() float64 {
	return s.Total
}

// GetItems returns the value of Items.
func (s *Order) GetItems() []OrderItem {
	return s.Items
}

// GetPackingLists returns the value of PackingLists.
func (s *Order) GetPackingLists() []PackingListSummary {
	return s.PackingLists
}

// GetInvoices returns the value of Invoices.
func (s *Order) GetInvoices() []InvoiceSummary {
	return s.Invoices
}

// SetID sets the value of ID.
func (s *Order) SetID(val string) {
	s.ID = val
}

// SetContactID sets the value of ContactID.
func (s *Order) SetContactID(val string) {
	s.ContactID = val
}

// SetBranchID sets the value of BranchID.
func (s *Order) SetBranchID(val string) {
	s.BranchID = val
}

// SetPurchaseOrder sets the value of PurchaseOrder.
func (s *Order) SetPurchaseOrder(val string) {
	s.PurchaseOrder = val
}

// SetStatus sets the value of Status.
func (s *Order) SetStatus(val OrderStatus) {
	s.Status = val
}

// SetDateOrdered sets the value of DateOrdered.
func (s *Order) SetDateOrdered(val time.Time) {
	s.DateOrdered = val
}

// SetDateRequested sets the value of DateRequested.
func (s *Order) SetDateRequested(val time.Time) {
	s.DateRequested = val
}

// SetTaker sets the value of Taker.
func (s *Order) SetTaker(val OptString) {
	s.Taker = val
}

// SetDeliveryInstructions sets the value of DeliveryInstructions.
func (s *Order) SetDeliveryInstructions(val string) {
	s.DeliveryInstructions = val
}

// SetShippingAddress sets the value of ShippingAddress.
func (s *Order) SetShippingAddress(val Address) {
	s.ShippingAddress = val
}

// SetTotal sets the value of Total.
func (s *Order) SetTotal(val float64) {
	s.Total = val
}

// SetItems sets the value of Items.
func (s *Order) SetItems(val []OrderItem) {
	s.Items = val
}

// SetPackingLists sets the value of PackingLists.
func (s *Order) SetPackingLists(val []PackingListSummary) {
	s.PackingLists = val
}

// SetInvoices sets the value of Invoices.
func (s *Order) SetInvoices(val []InvoiceSummary) {
	s.Invoices = val
}

// Ref: #/components/schemas/OrderItem
type OrderItem struct {
	ProductSn           string                  `json:"product_sn"`
	ProductName         string                  `json:"product_name"`
	ProductID           string                  `json:"product_id"`
	CustomerProductSn   string                  `json:"customer_product_sn"`
	OrderedQuantity     float64                 `json:"ordered_quantity"`
	ShippedQuantity     float64                 `json:"shipped_quantity"`
	RemainingQuantity   float64                 `json:"remaining_quantity"`
	UnitType            string                  `json:"unit_type"`
	UnitPrice           float64                 `json:"unit_price"`
	TotalPrice          float64                 `json:"total_price"`
	BackOrderedQuantity float64                 `json:"back_ordered_quantity"`
	Disposition         OptOrderItemDisposition `json:"disposition"`
	Releases            []OrderItemRelease      `json:"releases"`
}

// GetProductSn returns the value of ProductSn.
func (s *OrderItem) GetProductSn() string {
	return s.ProductSn
}

// GetProductName returns the value of ProductName.
func (s *OrderItem) GetProductName() string {
	return s.ProductName
}

// GetProductID returns the value of ProductID.
func (s *OrderItem) GetProductID() string {
	return s.ProductID
}

// GetCustomerProductSn returns the value of CustomerProductSn.
func (s *OrderItem) GetCustomerProductSn() string {
	return s.CustomerProductSn
}

// GetOrderedQuantity returns the value of OrderedQuantity.
func (s *OrderItem) GetOrderedQuantity() float64 {
	return s.OrderedQuantity
}

// GetShippedQuantity returns the value of ShippedQuantity.
func (s *OrderItem) GetShippedQuantity() float64 {
	return s.ShippedQuantity
}

// GetRemainingQuantity returns the value of RemainingQuantity.
func (s *OrderItem) GetRemainingQuantity() float64 {
	return s.RemainingQuantity
}

// GetUnitType returns the value of UnitType.
func (s *OrderItem) GetUnitType() string {
	return s.UnitType
}

// GetUnitPrice returns the value of UnitPrice.
func (s *OrderItem) GetUnitPrice() float64 {
	return s.UnitPrice
}

// GetTotalPrice returns the value of TotalPrice.
func (s *OrderItem) GetTotalPrice() float64 {
	return s.TotalPrice
}

// GetBackOrderedQuantity returns the value of BackOrderedQuantity.
func (s *OrderItem) GetBackOrderedQuantity() float64 {
	return s.BackOrderedQuantity
}

// GetDisposition returns the value of Disposition.
func (s *OrderItem) GetDisposition() OptOrderItemDisposition {
	return s.Disposition
}

// GetReleases returns the value of Releases.
func (s *OrderItem) GetReleases() []OrderItemRelease {
	return s.Releases
}

// SetProductSn sets the value of ProductSn.
func (s *OrderItem) SetProductSn(val string) {
	s.ProductSn = val
}

// SetProductName sets the value of ProductName.
func (s *OrderItem) SetProductName(val string) {
	s.ProductName = val
}

// SetProductID sets the value of ProductID.
func (s *OrderItem) SetProductID(val string) {
	s.ProductID = val
}

// SetCustomerProductSn sets the value of CustomerProductSn.
func (s *OrderItem) SetCustomerProductSn(val string) {
	s.CustomerProductSn = val
}

// SetOrderedQuantity sets the value of OrderedQuantity.
func (s *OrderItem) SetOrderedQuantity(val float64) {
	s.OrderedQuantity = val
}

// SetShippedQuantity sets the value of ShippedQuantity.
func (s *OrderItem) SetShippedQuantity(val float64) {
	s.ShippedQuantity = val
}

// SetRemainingQuantity sets the value of RemainingQuantity.
func (s *OrderItem) SetRemainingQuantity(val float64) {
	s.RemainingQuantity = val
}

// SetUnitType sets the value of UnitType.
func (s *OrderItem) SetUnitType(val string) {
	s.UnitType = val
}

// SetUnitPrice sets the value of UnitPrice.
func (s *OrderItem) SetUnitPrice(val float64) {
	s.UnitPrice = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *OrderItem) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

// SetBackOrderedQuantity sets the value of BackOrderedQuantity.
func (s *OrderItem) SetBackOrderedQuantity(val float64) {
	s.BackOrderedQuantity = val
}

// SetDisposition sets the value of Disposition.
func (s *OrderItem) SetDisposition(val OptOrderItemDisposition) {
	s.Disposition = val
}

// SetReleases sets the value of Releases.
func (s *OrderItem) SetReleases(val []OrderItemRelease) {
	s.Releases = val
}

// Ref: #/components/schemas/OrderItemDisposition
type OrderItemDisposition string

const (
	OrderItemDispositionUnspecified       OrderItemDisposition = "unspecified"
	OrderItemDispositionBackorder         OrderItemDisposition = "backorder"
	OrderItemDispositionCancel            OrderItemDisposition = "cancel"
	OrderItemDispositionDirectShip        OrderItemDisposition = "direct_ship"
	OrderItemDispositionFuture            OrderItemDisposition = "future"
	OrderItemDispositionHold              OrderItemDisposition = "hold"
	OrderItemDispositionMultistageProcess OrderItemDisposition = "multistage_process"
	OrderItemDispositionProductionOrder   OrderItemDisposition = "production_order"
	OrderItemDispositionSpecialOrder      OrderItemDisposition = "special_order"
	OrderItemDispositionTransfer          OrderItemDisposition = "transfer"
)

// AllValues returns all OrderItemDisposition values.
func (OrderItemDisposition) AllValues() []OrderItemDisposition {
	return []OrderItemDisposition{
		OrderItemDispositionUnspecified,
		OrderItemDispositionBackorder,
		OrderItemDispositionCancel,
		OrderItemDispositionDirectShip,
		OrderItemDispositionFuture,
		OrderItemDispositionHold,
		OrderItemDispositionMultistageProcess,
		OrderItemDispositionProductionOrder,
		OrderItemDispositionSpecialOrder,
		OrderItemDispositionTransfer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderItemDisposition) MarshalText() ([]byte, error) {
	switch s {
	case OrderItemDispositionUnspecified:
		return []byte(s), nil
	case OrderItemDispositionBackorder:
		return []byte(s), nil
	case OrderItemDispositionCancel:
		return []byte(s), nil
	case OrderItemDispositionDirectShip:
		return []byte(s), nil
	case OrderItemDispositionFuture:
		return []byte(s), nil
	case OrderItemDispositionHold:
		return []byte(s), nil
	case OrderItemDispositionMultistageProcess:
		return []byte(s), nil
	case OrderItemDispositionProductionOrder:
		return []byte(s), nil
	case OrderItemDispositionSpecialOrder:
		return []byte(s), nil
	case OrderItemDispositionTransfer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderItemDisposition) UnmarshalText(data []byte) error {
	switch OrderItemDisposition(data) {
	case OrderItemDispositionUnspecified:
		*s = OrderItemDispositionUnspecified
		return nil
	case OrderItemDispositionBackorder:
		*s = OrderItemDispositionBackorder
		return nil
	case OrderItemDispositionCancel:
		*s = OrderItemDispositionCancel
		return nil
	case OrderItemDispositionDirectShip:
		*s = OrderItemDispositionDirectShip
		return nil
	case OrderItemDispositionFuture:
		*s = OrderItemDispositionFuture
		return nil
	case OrderItemDispositionHold:
		*s = OrderItemDispositionHold
		return nil
	case OrderItemDispositionMultistageProcess:
		*s = OrderItemDispositionMultistageProcess
		return nil
	case OrderItemDispositionProductionOrder:
		*s = OrderItemDispositionProductionOrder
		return nil
	case OrderItemDispositionSpecialOrder:
		*s = OrderItemDispositionSpecialOrder
		return nil
	case OrderItemDispositionTransfer:
		*s = OrderItemDispositionTransfer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OrderItemRelease
type OrderItemRelease struct {
	DateReleased     time.Time `json:"date_released"`
	ReleasedQuantity float64   `json:"released_quantity"`
	ShippedQuantity  float64   `json:"shipped_quantity"`
	CanceledQuantity float64   `json:"canceled_quantity"`
}

// GetDateReleased returns the value of DateReleased.
func (s *OrderItemRelease) GetDateReleased() time.Time {
	return s.DateReleased
}

// GetReleasedQuantity returns the value of ReleasedQuantity.
func (s *OrderItemRelease) GetReleasedQuantity() float64 {
	return s.ReleasedQuantity
}

// GetShippedQuantity returns the value of ShippedQuantity.
func (s *OrderItemRelease) GetShippedQuantity() float64 {
	return s.ShippedQuantity
}

// GetCanceledQuantity returns the value of CanceledQuantity.
func (s *OrderItemRelease) GetCanceledQuantity() float64 {
	return s.CanceledQuantity
}

// SetDateReleased sets the value of DateReleased.
func (s *OrderItemRelease) SetDateReleased(val time.Time) {
	s.DateReleased = val
}

// SetReleasedQuantity sets the value of ReleasedQuantity.
func (s *OrderItemRelease) SetReleasedQuantity(val float64) {
	s.ReleasedQuantity = val
}

// SetShippedQuantity sets the value of ShippedQuantity.
func (s *OrderItemRelease) SetShippedQuantity(val float64) {
	s.ShippedQuantity = val
}

// SetCanceledQuantity sets the value of CanceledQuantity.
func (s *OrderItemRelease) SetCanceledQuantity(val float64) {
	s.CanceledQuantity = val
}

// Ref: #/components/schemas/OrderStatus
type OrderStatus string

const (
	OrderStatusUnspecified     OrderStatus = "unspecified"
	OrderStatusApproved        OrderStatus = "approved"
	OrderStatusCompleted       OrderStatus = "completed"
	OrderStatusCancelled       OrderStatus = "cancelled"
	OrderStatusPendingApproval OrderStatus = "pending_approval"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusUnspecified,
		OrderStatusApproved,
		OrderStatusCompleted,
		OrderStatusCancelled,
		OrderStatusPendingApproval,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusUnspecified:
		return []byte(s), nil
	case OrderStatusApproved:
		return []byte(s), nil
	case OrderStatusCompleted:
		return []byte(s), nil
	case OrderStatusCancelled:
		return []byte(s), nil
	case OrderStatusPendingApproval:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusUnspecified:
		*s = OrderStatusUnspecified
		return nil
	case OrderStatusApproved:
		*s = OrderStatusApproved
		return nil
	case OrderStatusCompleted:
		*s = OrderStatusCompleted
		return nil
	case OrderStatusCancelled:
		*s = OrderStatusCancelled
		return nil
	case OrderStatusPendingApproval:
		*s = OrderStatusPendingApproval
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OrderSummary
type OrderSummary struct {
	ID            string      `json:"id"`
	ContactID     string      `json:"contact_id"`
	BranchID      string      `json:"branch_id"`
	PurchaseOrder string      `json:"purchase_order"`
	Status        OrderStatus `json:"status"`
	DateOrdered   time.Time   `json:"date_ordered"`
	DateRequested time.Time   `json:"date_requested"`
}

// GetID returns the value of ID.
func (s *OrderSummary) GetID() string {
	return s.ID
}

// GetContactID returns the value of ContactID.
func (s *OrderSummary) GetContactID() string {
	return s.ContactID
}

// GetBranchID returns the value of BranchID.
func (s *OrderSummary) GetBranchID() string {
	return s.BranchID
}

// GetPurchaseOrder returns the value of PurchaseOrder.
func (s *OrderSummary) GetPurchaseOrder() string {
	return s.PurchaseOrder
}

// GetStatus returns the value of Status.
func (s *OrderSummary) GetStatus() OrderStatus {
	return s.Status
}

// GetDateOrdered returns the value of DateOrdered.
func (s *OrderSummary) GetDateOrdered() time.Time {
	return s.DateOrdered
}

// GetDateRequested returns the value of DateRequested.
func (s *OrderSummary) GetDateRequested() time.Time {
	return s.DateRequested
}

// SetID sets the value of ID.
func (s *OrderSummary) SetID(val string) {
	s.ID = val
}

// SetContactID sets the value of ContactID.
func (s *OrderSummary) SetContactID(val string) {
	s.ContactID = val
}

// SetBranchID sets the value of BranchID.
func (s *OrderSummary) SetBranchID(val string) {
	s.BranchID = val
}

// SetPurchaseOrder sets the value of PurchaseOrder.
func (s *OrderSummary) SetPurchaseOrder(val string) {
	s.PurchaseOrder = val
}

// SetStatus sets the value of Status.
func (s *OrderSummary) SetStatus(val OrderStatus) {
	s.Status = val
}

// SetDateOrdered sets the value of DateOrdered.
func (s *OrderSummary) SetDateOrdered(val time.Time) {
	s.DateOrdered = val
}

// SetDateRequested sets the value of DateRequested.
func (s *OrderSummary) SetDateRequested(val time.Time) {
	s.DateRequested = val
}

// Ref: #/components/schemas/PackingListSummary
type PackingListSummary struct {
	InvoiceID    string    `json:"invoice_id"`
	DateInvoiced time.Time `json:"date_invoiced"`
}

// GetInvoiceID returns the value of InvoiceID.
func (s *PackingListSummary) GetInvoiceID() string {
	return s.InvoiceID
}

// GetDateInvoiced returns the value of DateInvoiced.
func (s *PackingListSummary) GetDateInvoiced() time.Time {
	return s.DateInvoiced
}

// SetInvoiceID sets the value of InvoiceID.
func (s *PackingListSummary) SetInvoiceID(val string) {
	s.InvoiceID = val
}

// SetDateInvoiced sets the value of DateInvoiced.
func (s *PackingListSummary) SetDateInvoiced(val time.Time) {
	s.DateInvoiced = val
}

// Ref: #/components/schemas/PageMetadata
type PageMetadata struct {
	TotalPages   int `json:"total_pages"`
	TotalRecords int `json:"total_records"`
}

// GetTotalPages returns the value of TotalPages.
func (s *PageMetadata) GetTotalPages() int {
	return s.TotalPages
}

// GetTotalRecords returns the value of TotalRecords.
func (s *PageMetadata) GetTotalRecords() int {
	return s.TotalRecords
}

// SetTotalPages sets the value of TotalPages.
func (s *PageMetadata) SetTotalPages(val int) {
	s.TotalPages = val
}

// SetTotalRecords sets the value of TotalRecords.
func (s *PageMetadata) SetTotalRecords(val int) {
	s.TotalRecords = val
}

// Ref: #/components/schemas/Product
type Product struct {
	ID                     string            `json:"id"`
	Sn                     string            `json:"sn"`
	Name                   string            `json:"name"`
	Description            string            `json:"description"`
	ProductGroupID         string            `json:"product_group_id"`
	ProductGroupName       string            `json:"product_group_name"`
	SalesUnitOfMeasurement UnitOfMeasurement `json:"sales_unit_of_measurement"`
	ImageURL               OptString         `json:"image_url"`
	// Indicates if the product is active.
	IsActive bool `json:"is_active"`
	// Indicated if the product has stock.
	HasStock bool `json:"has_stock"`
}

// GetID returns the value of ID.
func (s *Product) GetID() string {
	return s.ID
}

// GetSn returns the value of Sn.
func (s *Product) GetSn() string {
	return s.Sn
}

// GetName returns the value of Name.
func (s *Product) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Product) GetDescription() string {
	return s.Description
}

// GetProductGroupID returns the value of ProductGroupID.
func (s *Product) GetProductGroupID() string {
	return s.ProductGroupID
}

// GetProductGroupName returns the value of ProductGroupName.
func (s *Product) GetProductGroupName() string {
	return s.ProductGroupName
}

// GetSalesUnitOfMeasurement returns the value of SalesUnitOfMeasurement.
func (s *Product) GetSalesUnitOfMeasurement() UnitOfMeasurement {
	return s.SalesUnitOfMeasurement
}

// GetImageURL returns the value of ImageURL.
func (s *Product) GetImageURL() OptString {
	return s.ImageURL
}

// GetIsActive returns the value of IsActive.
func (s *Product) GetIsActive() bool {
	return s.IsActive
}

// GetHasStock returns the value of HasStock.
func (s *Product) GetHasStock() bool {
	return s.HasStock
}

// SetID sets the value of ID.
func (s *Product) SetID(val string) {
	s.ID = val
}

// SetSn sets the value of Sn.
func (s *Product) SetSn(val string) {
	s.Sn = val
}

// SetName sets the value of Name.
func (s *Product) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Product) SetDescription(val string) {
	s.Description = val
}

// SetProductGroupID sets the value of ProductGroupID.
func (s *Product) SetProductGroupID(val string) {
	s.ProductGroupID = val
}

// SetProductGroupName sets the value of ProductGroupName.
func (s *Product) SetProductGroupName(val string) {
	s.ProductGroupName = val
}

// SetSalesUnitOfMeasurement sets the value of SalesUnitOfMeasurement.
func (s *Product) SetSalesUnitOfMeasurement(val UnitOfMeasurement) {
	s.SalesUnitOfMeasurement = val
}

// SetImageURL sets the value of ImageURL.
func (s *Product) SetImageURL(val OptString) {
	s.ImageURL = val
}

// SetIsActive sets the value of IsActive.
func (s *Product) SetIsActive(val bool) {
	s.IsActive = val
}

// SetHasStock sets the value of HasStock.
func (s *Product) SetHasStock(val bool) {
	s.HasStock = val
}

// Ref: #/components/schemas/PurchaseSummary
type PurchaseSummary struct {
	ProductID          string  `json:"product_id"`
	ProductSn          string  `json:"product_sn"`
	ProductName        string  `json:"product_name"`
	ProductDescription string  `json:"product_description"`
	OrderedQuantity    float64 `json:"ordered_quantity"`
	UnitOfMeasurement  string  `json:"unit_of_measurement"`
}

// GetProductID returns the value of ProductID.
func (s *PurchaseSummary) GetProductID() string {
	return s.ProductID
}

// GetProductSn returns the value of ProductSn.
func (s *PurchaseSummary) GetProductSn() string {
	return s.ProductSn
}

// GetProductName returns the value of ProductName.
func (s *PurchaseSummary) GetProductName() string {
	return s.ProductName
}

// GetProductDescription returns the value of ProductDescription.
func (s *PurchaseSummary) GetProductDescription() string {
	return s.ProductDescription
}

// GetOrderedQuantity returns the value of OrderedQuantity.
func (s *PurchaseSummary) GetOrderedQuantity() float64 {
	return s.OrderedQuantity
}

// GetUnitOfMeasurement returns the value of UnitOfMeasurement.
func (s *PurchaseSummary) GetUnitOfMeasurement() string {
	return s.UnitOfMeasurement
}

// SetProductID sets the value of ProductID.
func (s *PurchaseSummary) SetProductID(val string) {
	s.ProductID = val
}

// SetProductSn sets the value of ProductSn.
func (s *PurchaseSummary) SetProductSn(val string) {
	s.ProductSn = val
}

// SetProductName sets the value of ProductName.
func (s *PurchaseSummary) SetProductName(val string) {
	s.ProductName = val
}

// SetProductDescription sets the value of ProductDescription.
func (s *PurchaseSummary) SetProductDescription(val string) {
	s.ProductDescription = val
}

// SetOrderedQuantity sets the value of OrderedQuantity.
func (s *PurchaseSummary) SetOrderedQuantity(val float64) {
	s.OrderedQuantity = val
}

// SetUnitOfMeasurement sets the value of UnitOfMeasurement.
func (s *PurchaseSummary) SetUnitOfMeasurement(val string) {
	s.UnitOfMeasurement = val
}

// Ref: #/components/schemas/Quote
type Quote struct {
	ID            string      `json:"id"`
	PurchaseOrder string      `json:"purchase_order"`
	DateCreated   time.Time   `json:"date_created"`
	DateExpires   time.Time   `json:"date_expires"`
	Status        QuoteStatus `json:"status"`
	Items         []QuoteItem `json:"items"`
}

// GetID returns the value of ID.
func (s *Quote) GetID() string {
	return s.ID
}

// GetPurchaseOrder returns the value of PurchaseOrder.
func (s *Quote) GetPurchaseOrder() string {
	return s.PurchaseOrder
}

// GetDateCreated returns the value of DateCreated.
func (s *Quote) GetDateCreated() time.Time {
	return s.DateCreated
}

// GetDateExpires returns the value of DateExpires.
func (s *Quote) GetDateExpires() time.Time {
	return s.DateExpires
}

// GetStatus returns the value of Status.
func (s *Quote) GetStatus() QuoteStatus {
	return s.Status
}

// GetItems returns the value of Items.
func (s *Quote) GetItems() []QuoteItem {
	return s.Items
}

// SetID sets the value of ID.
func (s *Quote) SetID(val string) {
	s.ID = val
}

// SetPurchaseOrder sets the value of PurchaseOrder.
func (s *Quote) SetPurchaseOrder(val string) {
	s.PurchaseOrder = val
}

// SetDateCreated sets the value of DateCreated.
func (s *Quote) SetDateCreated(val time.Time) {
	s.DateCreated = val
}

// SetDateExpires sets the value of DateExpires.
func (s *Quote) SetDateExpires(val time.Time) {
	s.DateExpires = val
}

// SetStatus sets the value of Status.
func (s *Quote) SetStatus(val QuoteStatus) {
	s.Status = val
}

// SetItems sets the value of Items.
func (s *Quote) SetItems(val []QuoteItem) {
	s.Items = val
}

// Ref: #/components/schemas/QuoteItem
type QuoteItem struct {
	ProductID         string  `json:"product_id"`
	ProductSn         string  `json:"product_sn"`
	ProductName       string  `json:"product_name"`
	CustomerProductSn string  `json:"customer_product_sn"`
	OrderedQuantity   float64 `json:"ordered_quantity"`
	UnitType          string  `json:"unit_type"`
	UnitPrice         float64 `json:"unit_price"`
	TotalPrice        float64 `json:"total_price"`
}

// GetProductID returns the value of ProductID.
func (s *QuoteItem) GetProductID() string {
	return s.ProductID
}

// GetProductSn returns the value of ProductSn.
func (s *QuoteItem) GetProductSn() string {
	return s.ProductSn
}

// GetProductName returns the value of ProductName.
func (s *QuoteItem) GetProductName() string {
	return s.ProductName
}

// GetCustomerProductSn returns the value of CustomerProductSn.
func (s *QuoteItem) GetCustomerProductSn() string {
	return s.CustomerProductSn
}

// GetOrderedQuantity returns the value of OrderedQuantity.
func (s *QuoteItem) GetOrderedQuantity() float64 {
	return s.OrderedQuantity
}

// GetUnitType returns the value of UnitType.
func (s *QuoteItem) GetUnitType() string {
	return s.UnitType
}

// GetUnitPrice returns the value of UnitPrice.
func (s *QuoteItem) GetUnitPrice() float64 {
	return s.UnitPrice
}

// GetTotalPrice returns the value of TotalPrice.
func (s *QuoteItem) GetTotalPrice() float64 {
	return s.TotalPrice
}

// SetProductID sets the value of ProductID.
func (s *QuoteItem) SetProductID(val string) {
	s.ProductID = val
}

// SetProductSn sets the value of ProductSn.
func (s *QuoteItem) SetProductSn(val string) {
	s.ProductSn = val
}

// SetProductName sets the value of ProductName.
func (s *QuoteItem) SetProductName(val string) {
	s.ProductName = val
}

// SetCustomerProductSn sets the value of CustomerProductSn.
func (s *QuoteItem) SetCustomerProductSn(val string) {
	s.CustomerProductSn = val
}

// SetOrderedQuantity sets the value of OrderedQuantity.
func (s *QuoteItem) SetOrderedQuantity(val float64) {
	s.OrderedQuantity = val
}

// SetUnitType sets the value of UnitType.
func (s *QuoteItem) SetUnitType(val string) {
	s.UnitType = val
}

// SetUnitPrice sets the value of UnitPrice.
func (s *QuoteItem) SetUnitPrice(val float64) {
	s.UnitPrice = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *QuoteItem) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

// Ref: #/components/schemas/QuoteStatus
type QuoteStatus string

const (
	QuoteStatusUnspecified QuoteStatus = "unspecified"
	QuoteStatusPending     QuoteStatus = "pending"
	QuoteStatusProcessed   QuoteStatus = "processed"
	QuoteStatusCancelled   QuoteStatus = "cancelled"
	QuoteStatusClosed      QuoteStatus = "closed"
)

// AllValues returns all QuoteStatus values.
func (QuoteStatus) AllValues() []QuoteStatus {
	return []QuoteStatus{
		QuoteStatusUnspecified,
		QuoteStatusPending,
		QuoteStatusProcessed,
		QuoteStatusCancelled,
		QuoteStatusClosed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s QuoteStatus) MarshalText() ([]byte, error) {
	switch s {
	case QuoteStatusUnspecified:
		return []byte(s), nil
	case QuoteStatusPending:
		return []byte(s), nil
	case QuoteStatusProcessed:
		return []byte(s), nil
	case QuoteStatusCancelled:
		return []byte(s), nil
	case QuoteStatusClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *QuoteStatus) UnmarshalText(data []byte) error {
	switch QuoteStatus(data) {
	case QuoteStatusUnspecified:
		*s = QuoteStatusUnspecified
		return nil
	case QuoteStatusPending:
		*s = QuoteStatusPending
		return nil
	case QuoteStatusProcessed:
		*s = QuoteStatusProcessed
		return nil
	case QuoteStatusCancelled:
		*s = QuoteStatusCancelled
		return nil
	case QuoteStatusClosed:
		*s = QuoteStatusClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/QuoteSummary
type QuoteSummary struct {
	ID            string      `json:"id"`
	ContactID     string      `json:"contact_id"`
	BranchID      string      `json:"branch_id"`
	PurchaseOrder string      `json:"purchase_order"`
	Status        QuoteStatus `json:"status"`
	DateCreated   time.Time   `json:"date_created"`
	DateExpires   time.Time   `json:"date_expires"`
}

// GetID returns the value of ID.
func (s *QuoteSummary) GetID() string {
	return s.ID
}

// GetContactID returns the value of ContactID.
func (s *QuoteSummary) GetContactID() string {
	return s.ContactID
}

// GetBranchID returns the value of BranchID.
func (s *QuoteSummary) GetBranchID() string {
	return s.BranchID
}

// GetPurchaseOrder returns the value of PurchaseOrder.
func (s *QuoteSummary) GetPurchaseOrder() string {
	return s.PurchaseOrder
}

// GetStatus returns the value of Status.
func (s *QuoteSummary) GetStatus() QuoteStatus {
	return s.Status
}

// GetDateCreated returns the value of DateCreated.
func (s *QuoteSummary) GetDateCreated() time.Time {
	return s.DateCreated
}

// GetDateExpires returns the value of DateExpires.
func (s *QuoteSummary) GetDateExpires() time.Time {
	return s.DateExpires
}

// SetID sets the value of ID.
func (s *QuoteSummary) SetID(val string) {
	s.ID = val
}

// SetContactID sets the value of ContactID.
func (s *QuoteSummary) SetContactID(val string) {
	s.ContactID = val
}

// SetBranchID sets the value of BranchID.
func (s *QuoteSummary) SetBranchID(val string) {
	s.BranchID = val
}

// SetPurchaseOrder sets the value of PurchaseOrder.
func (s *QuoteSummary) SetPurchaseOrder(val string) {
	s.PurchaseOrder = val
}

// SetStatus sets the value of Status.
func (s *QuoteSummary) SetStatus(val QuoteStatus) {
	s.Status = val
}

// SetDateCreated sets the value of DateCreated.
func (s *QuoteSummary) SetDateCreated(val time.Time) {
	s.DateCreated = val
}

// SetDateExpires sets the value of DateExpires.
func (s *QuoteSummary) SetDateExpires(val time.Time) {
	s.DateExpires = val
}

// Merged schema.
// Ref: #/components/schemas/RangeAggregation
type RangeAggregation struct {
	FieldName string `json:"field_name"`
}

// GetFieldName returns the value of FieldName.
func (s *RangeAggregation) GetFieldName() string {
	return s.FieldName
}

// SetFieldName sets the value of FieldName.
func (s *RangeAggregation) SetFieldName(val string) {
	s.FieldName = val
}

type SearchProductsOK struct {
	Aggregations []Aggregation `json:"aggregations"`
	Metadata     PageMetadata  `json:"metadata"`
	Products     []Product     `json:"products"`
}

// GetAggregations returns the value of Aggregations.
func (s *SearchProductsOK) GetAggregations() []Aggregation {
	return s.Aggregations
}

// GetMetadata returns the value of Metadata.
func (s *SearchProductsOK) GetMetadata() PageMetadata {
	return s.Metadata
}

// GetProducts returns the value of Products.
func (s *SearchProductsOK) GetProducts() []Product {
	return s.Products
}

// SetAggregations sets the value of Aggregations.
func (s *SearchProductsOK) SetAggregations(val []Aggregation) {
	s.Aggregations = val
}

// SetMetadata sets the value of Metadata.
func (s *SearchProductsOK) SetMetadata(val PageMetadata) {
	s.Metadata = val
}

// SetProducts sets the value of Products.
func (s *SearchProductsOK) SetProducts(val []Product) {
	s.Products = val
}

type SearchProductsReq struct {
	SortBy  OptString                   `json:"sort_by"`
	Filters OptSearchProductsReqFilters `json:"filters"`
	Page    OptInt                      `json:"page"`
	Query   OptString                   `json:"query"`
}

// GetSortBy returns the value of SortBy.
func (s *SearchProductsReq) GetSortBy() OptString {
	return s.SortBy
}

// GetFilters returns the value of Filters.
func (s *SearchProductsReq) GetFilters() OptSearchProductsReqFilters {
	return s.Filters
}

// GetPage returns the value of Page.
func (s *SearchProductsReq) GetPage() OptInt {
	return s.Page
}

// GetQuery returns the value of Query.
func (s *SearchProductsReq) GetQuery() OptString {
	return s.Query
}

// SetSortBy sets the value of SortBy.
func (s *SearchProductsReq) SetSortBy(val OptString) {
	s.SortBy = val
}

// SetFilters sets the value of Filters.
func (s *SearchProductsReq) SetFilters(val OptSearchProductsReqFilters) {
	s.Filters = val
}

// SetPage sets the value of Page.
func (s *SearchProductsReq) SetPage(val OptInt) {
	s.Page = val
}

// SetQuery sets the value of Query.
func (s *SearchProductsReq) SetQuery(val OptString) {
	s.Query = val
}

type SearchProductsReqFilters map[string][]string

func (s *SearchProductsReqFilters) init() SearchProductsReqFilters {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

type SetActiveBranchBadRequest Error

func (*SetActiveBranchBadRequest) setActiveBranchRes() {}

type SetActiveBranchForbidden Error

func (*SetActiveBranchForbidden) setActiveBranchRes() {}

type SetActiveBranchOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *SetActiveBranchOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *SetActiveBranchOK) SetMessage(val OptString) {
	s.Message = val
}

func (*SetActiveBranchOK) setActiveBranchRes() {}

type SetActiveBranchReq struct {
	// ID of the branch to set as active.
	BranchID string `json:"branch_id"`
}

// GetBranchID returns the value of BranchID.
func (s *SetActiveBranchReq) GetBranchID() string {
	return s.BranchID
}

// SetBranchID sets the value of BranchID.
func (s *SetActiveBranchReq) SetBranchID(val string) {
	s.BranchID = val
}

// Merged schema.
// Ref: #/components/schemas/TermsAggregation
type TermsAggregation struct {
	FieldName string                   `json:"field_name"`
	Buckets   []TermsAggregationBucket `json:"buckets"`
}

// GetFieldName returns the value of FieldName.
func (s *TermsAggregation) GetFieldName() string {
	return s.FieldName
}

// GetBuckets returns the value of Buckets.
func (s *TermsAggregation) GetBuckets() []TermsAggregationBucket {
	return s.Buckets
}

// SetFieldName sets the value of FieldName.
func (s *TermsAggregation) SetFieldName(val string) {
	s.FieldName = val
}

// SetBuckets sets the value of Buckets.
func (s *TermsAggregation) SetBuckets(val []TermsAggregationBucket) {
	s.Buckets = val
}

// Ref: #/components/schemas/TermsAggregationBucket
type TermsAggregationBucket struct {
	Key   string `json:"key"`
	Count int    `json:"count"`
}

// GetKey returns the value of Key.
func (s *TermsAggregationBucket) GetKey() string {
	return s.Key
}

// GetCount returns the value of Count.
func (s *TermsAggregationBucket) GetCount() int {
	return s.Count
}

// SetKey sets the value of Key.
func (s *TermsAggregationBucket) SetKey(val string) {
	s.Key = val
}

// SetCount sets the value of Count.
func (s *TermsAggregationBucket) SetCount(val int) {
	s.Count = val
}

// Ref: #/components/schemas/UnitOfMeasurement
type UnitOfMeasurement struct {
	ID               string  `json:"id"`
	ConversionFactor float64 `json:"conversion_factor"`
}

// GetID returns the value of ID.
func (s *UnitOfMeasurement) GetID() string {
	return s.ID
}

// GetConversionFactor returns the value of ConversionFactor.
func (s *UnitOfMeasurement) GetConversionFactor() float64 {
	return s.ConversionFactor
}

// SetID sets the value of ID.
func (s *UnitOfMeasurement) SetID(val string) {
	s.ID = val
}

// SetConversionFactor sets the value of ConversionFactor.
func (s *UnitOfMeasurement) SetConversionFactor(val float64) {
	s.ConversionFactor = val
}
